#+Title: Well Tuned Emacs
#+Author: Роман Захаров
#+Email: zahardzhan@gmail.com

#+Options: HTML-Postamble:nil # HTML-страница без футера
#+Options: ToC:nil # Оглавление
#+Options: Org-Display-Internal-Link-With-Indirect-Buffer:t # Внутренние ссылки открываются в другом буфере
#+Options: ^:t # TeX-like syntax for sub/superscripts ^:{} and a_{b}
# +Style: <link rel="stylesheet" type="text/css" href="README.css"/>

Emacs [“Editor MACroS”, /​/ˈeditər ˈmakrōs/​/ → /​/ˈemaks/​/, далее ---
«эмакс»] был создан давным давно в Лаборатории Искуственного
Интеллекта MIT [[[https://en.wikipedia.org/wiki/MIT_Computer_Science_and_Artificial_Intelligence_Laboratory][AI Lab]]].
Эмакс это текстовый редактор поведение и возможности которого
изменяются прямо во время написания в нем текста на языке
программирования на котором написан сам эмакс. Более того, прямо во
время написания в эмаксе текста на языке программирования на котором
написан сам эмакс изменяется поведение и возможности самого языка
программирования на котором написан эмакс. Все это делает эмакс самым
гибким и универсальным текстовым редактором в сравнении с любым
другим.

Эмакс развивается уже несколько десятилетий. Каждый год сотни человек
добавляют в него все новые и новые возможности. Обычно это небольшие
фрагменты обособленной функциональности под нужды конкретного
пользователя. Однако, общий объем и широта охвата этих улучшений со
временем превратили мощный текстовый редактор во всеобъемлющую
кроссплатформенную программную среду в которой можно делать абсолютно
все что угодно, если это хотя бы немного относится к работе с текстом.

Универсальность эмакса играет вам на руку, если вы понимаете как он
устроен: вы можете делать тысячу разных дел через единый интерфейс в
котором все состоит из текста во всех его проявлениях. Возможно, это
выглядит архаично с точки зрения представлений о современном
пользовательском интерфейсе, но это не так; хотя бы потому что
современные интерфейсы не раскрывают силу простого текста в полной
мере. Чтобы стать грамотным пользователем эмакса, вам придется понять
его концепцию и внутреннее устройство, а это значит --- приобщиться к
культуре хакеров 70-х годов прошлого века. Новичков такое положение
дел пугает, но все не так плохо: эмакс сложен только для сложных
задач, а для простых задач он прост, все зависит только от ваших
потребностей. Начать знакомство с ним лучше всего с общего обзора
“[[http://www.gnu.org/software/emacs/tour/][A Guided Tour of Emacs]]”
на сайте [[http://www.gnu.org/philosophy/free-sw.ru.html][свободной]]
[[http://www.gnu.org][операционной системы GNU]].

Ричард Столлман описывает историю возникновения эмакса в статье
«[[http://www.gnu.org/gnu/rms-lisp.ru.html][Мой опыт работы с лиспом и развитие GNU Emacs]]»;
эта история тесно связана с не менее интересной
[[http://www.gnu.org/gnu/thegnuproject.ru.html][историей проекта GNU]]
из которой можно узнать, что
[[https://www.gnu.org/software/emacs/][GNU Emacs]] был первым проектом
проекта GNU. Подробно суть того что из себя представляет эмакс
изложена в документе
“[[https://www.gnu.org/software/emacs/emacs-paper.html][EMACS: The Extensible, Customizable Display Editor]]”
написанном в 1981 году --- и за прошедшие годы эта суть ничуть не
изменилась.
                                        
Расширяемость эмакса это одновременно его благословение и
проклятье. Конечно, в стандартной поставке эмакс хорош, но не так
хорош как мог бы быть. Вы не ограничены решениями разработчиков, и
если вам нужна функциональность которой в эмаксе нет, вы можете
добавить ее сами: достаточно просто открыть эмакс и подробно её
описать. В конце концов все возможности эмакса по редактированию
текста это всего лишь текст описывающий что делать с текстом, и вы
можете изменить этот текст в любое время точно так же как и любой
другой, тем самым изменив возможности эмакса. Потенциально он обладает
безграничными возможностями, но чтобы ими воспользоваться придется
взяться за настройку, а это подразумевает умение программировать и
плотное общение с сообществом.

Настройка эмакса это своего рода декоративно-прикладное искусство; для
каждого конкретного пользователя она заключается в составлении
лисп-программы из фрагментов лисп-кода взятых из множества
разрозненных источников. Никакого другого способа в принципе нет,
поэтому перед погружением в эту тему следует освоиться с
программированием вообще и программированием на лиспе в частности.

В изучении программирования поможет книга
«[[http://newstar.rinet.ru/~goga/sicp/sicp-ru-screen.pdf][Структура и интерпретация компьютерных программ]]» ---
это вводный курс по информатике в MIT. В деле написания программ для
эмакса пригодится учебник
«[[http://alexott.net/ru/emacs/elisp-intro/elisp-intro-ru.html][Введение в программирование на Emacs Lisp]]»
и справочник
“[[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html][GNU Emacs Lisp Reference Manual]]”.

Эмакс совершенно точно не та программа за изучение которой стоит
браться только ради того, чтобы редактировать в нем текст. Его следует
воспринимать скорее как живой артефакт и культурный памятник более
цивилизованной эпохи. Изучение эмакса окажется пустой тратой времени
если вы не программируете и не хотите иметь ничего общего с этой
деятельностью, но если это не так, ничего лучше эмакса вы не найдете.

Обычно создание удобной для себя конфигурации и ее последующая доводка
растягивается на долгое время. Можно облегчить себе жизнь и установить
фреймворк в котором все основные настройки выполнены в соответствии с
видением автора фреймворка, и вам даже не придется править исходный
код для того чтобы просто пользоваться эмаксом в свое
удовольствие. Самые популярные фреймворки на сегодня:
[[https://github.com/syl20bnr/spacemacs][Spacemacs]],
[[https://github.com/bbatsov/prelude][Emacs Prelude]],
[[https://github.com/eschulte/emacs24-starter-kit][Eschulte Literate Emacs Starter Kit]],
[[https://github.com/overtone/emacs-live][Overtone Emacs Live]],
[[https://github.com/purcell/emacs.d][Purcell emacs.d]],
[[https://github.com/xiaohanyu/oh-my-emacs][Oh My Emacs]].

Все будет хорошо до тех пор пока вы не захотите встроить в эмакс некую
невероятную функциональность которой в выбранном фреймворке нет, и
тогда вам придется вручную интегрировать некий код не только в эмакс,
но и во фреймворк, а для этого нужно будет разобраться с его
внутренним устройством, что сводит все его достоинства на нет. К
такому выводу пришел автор
[[https://github.com/technomancy/emacs-starter-kit][Emacs Starter Kit]]
(см. [[http://www.google.com/search?q=meet+emacs+pluralsight+torrent][Meet Emacs]]),
когда закрыл свой проект после шести лет развития:

#+BEGIN_QUOTE
Старые версии Emacs Starter Kit были единой-для-всех кодовой базой
заменяющей содержимое директории ~/.emacs.d. Это было очень популярное
решение, но большая связка бессвязной функциональности вела к тому,
что пользователь просто привыкал к ней ничего не понимая. Когда
некоторые вещи ломались или вели себя не так как вам хотелось, вы и
понятия не имели где их исправить.

Я понял, что пользователям лучше подходят маленькие /пакеты/ дающие
желаемую функциональность. Вместо свалки кода, Emacs Starter Kit
сделался небольшим руководством. Как пользователю Emacs, вам предстоит
искать новые фрагменты эмакс-лисп-кода, интегрировать их,
конфигурировать, и даже писать свои собственные. Emacs Starter Kit
поможет вам советами где начать и что именно искать, но сборка годной
конфигурации это личное дело каждого.
#+END_QUOTE

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html][Система пакетов]]
[[[info:Emacs#Packages][инфо]]]
эмакса это встроенная в него
[[elisp:list-packages][лисп-программа]]
[см. [[https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/package.el][исходник на github]]]
которая автоматически интегрирует в эмакс другие лисп-программы из
интернета. Система пакетов работает независимо от операционной системы
под которой запущен редактор, она сама отслеживает зависимости между
лисп-программами и заботится об их обновлении. Разработку этой ситемы
[[http://tromey.com/blog/?p=325][начал]]
[[http://www.emacswiki.org/emacs/TomTromey][Том Тромей]] в 2007 году,
в 2012 она была включена в состав Emacs 24.1; пик популярности Emacs
Starter Kit пришелся именно на эти годы, то есть по большому счету
сообщество [[http://technomancy.us/153][использовало]] его для
разработки системы пакетов.

Как бы там ни было, личная конфигурация эмакса по своей природе была
есть и будет просто большой кучей бессвязаного кода, и лучший способ
справиться с этим --- оставить все как есть; или превратить эту кучу в
руководство которое будет
[[http://www.literateprogramming.com/knuthweb.pdf][объяснять причины]]
(в первую очередь чтобы не забыть самому) по которым тот или иной
фрагмент находится в этой куче, а потом сделать так чтобы это
руководство само превращало себя в лисп-программу и выполняло
конфигурацию эмакса при запуске. А также пересобирало само себя при
изменении и скачивало новые версии себя из удаленных
источников. Почему бы и нет. Это же руководство для эмакса.

[[elisp:org-babel-tangle][Превратить это руководство в лисп-программу]]
(/сплести/ программу --- /tangle/) очень просто, достаточно
[[https://gitlab.com/zahardzhan/well-tuned-emacs/raw/master/README.org][скачать свежую версию этого руководства]],
открыть ее в эмаксе и выполнить команду [[elisp:org-babel-tangle][M-x org-babel-tangle]].
В результате из фрагментов лисп-кода в этом руководстве будет создана
[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][лисп-программа инициализации эмакса]]
[[[info:Emacs#Init File][инфо]], [[http://www.emacswiki.org/emacs/InitFile][вики]]]
которую эмакс будет автоматически выполнять при каждом запуске.  В
общем виде программа инициализации выглядит так:

#+header: :noweb no-export
#+header: :shebang ;;; -*- lexical-binding: t -*-
#+begin_src elisp :tangle (identity user-init-file) 
  <<header>>
  <<requirements>>
  <<customize-this-reference>>
  <<customize-customize-and-apply-customizations>>
  <<try-to-download-this-reference-when-it-is-missing>>
  (if
      <<this-reference-is-in-its-place-and-is-newer-than-user-init-file>>
      <<tangle-this-reference-into-user-init-file-and-then-load-it-again>>
    (progn
      <<initialize-package-system-and-install-user-selected-packages>>
      <<load-packages-and-apply-advanced-customizations>>
      <<fix-some-bugs>>
      ))
  <<footer>>
#+end_src

Перед написанием кода на эмакс лиспе, следует немного обновить сам
язык программирования. Эмакс лисп это древнейший из современных
лиспов, созданный в темный период между возникновением первого лиспа
как концепции теории вычислений, и первыми двумя классическими
дизайнами лиспа: Common Lisp и Scheme; сама концепция лиспа так же
стара для него, как он сам по отношению к современному Common Lisp'у,
а современный Common Lisp в свою очередь --- по отношению к
современной Clojure. Эмакс лисп старомоден, его выразительные средства
скудны, тем не менее, это полноценный лисп и он может с легкостью
дополнить свои возможности основными языковыми средствами Common Lisp,
просто выполнив относительно небольшую встроенную в эмакс
лисп-программу
[[http://www.gnu.org/software/emacs/manual/html_mono/cl.html][GNU Emacs Common Lisp Emulation]]
[[[info:cl#Top][инфо]]]. Стоит заметить, что сообщество
[[http://xahlee.blogspot.ru/2012/06/controversy-of-common-lisp-package-in.html][очень неоднозначно]]
относится к этой лисп-программе; например, Столлман выступает
[[http://lists.gnu.org/archive/html/emacs-devel/2012-06/msg00056.html][против]]
ее использования в эмаксе.

#+name: requirements
#+begin_src elisp
  (require 'cl-lib)
#+end_src

В 24-й версии эмакса в эмакс-лиспе появилась поддержка
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Lexical-Binding.html#Using-Lexical-Binding][лексической области видимости и замыканий]]
(как в Scheme образца 1975 года). Лексическая область видимости делает
программу инициализации более изящной, быстрой и надежной. Первая
строка в файле инициализации устанавливает
[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html#Specifying-File-Variables][локальную переменную буфера]]
и активирует соответствующую семантику языка
программирования для нашей программы.

#+begin_src elisp :tangle no
  ;;; -*- lexical-binding: t -*-
#+end_src

Во время запуска эмакс выполняет
[[elisp:(describe-function 'command-line)][одну из девяти возможных программ инициализации]]
[см. [[https://github.com/emacs-mirror/emacs/blob/master/lisp/startup.el#L1158][исходник на github]]]
(на самом деле их больше, но другие варианты не кроссплатформенны), и
нам нужно определить какую именно исходную лисп-программу
инициализации мы возьмем за основу, в порядке приоритета: =~/_emacs=
(/устаревший --- для MS-DOS/), =~/.emacs=, =~/.emacs.el=,
=~/.emacs.d/init.el=.

| user-init-file while init       | user-init-file after init                     | actual-user-init-file              |
|---------------------------------+-----------------------------------------------+------------------------------------|
| =nil= when -q or -​-no-init-file | =nil=                                         | =~/.emacs.d/init.el= or some other |
| =~/.emacs= relative by default  | =~/.emacs= relative by default                | =~/.emacs=                         |
| =~/_emacs=                      | =~/_emacs=                                    | =~/_emacs=                         |
| =~/_emacs.el=                   | =~/_emacs.el=                                 | =~/_emacs.el=                      |
| =~/_emacs.elc=                  | =~/_emacs.el= or =~/_emacs= or =~/_emacs.elc= | =~/_emacs.el= or =~/_emacs=        |
| =~/.emacs=                      | =~/.emacs=                                    | =~/.emacs=                         |
| =~/.emacs.el=                   | =~/.emacs.el=                                 | =~/.emacs.el=                      |
| =~/.emacs.elc=                  | =~/.emacs.el= or =~/.emacs= or =~/.emacs.elc= | =~/.emacs.el= or =~/.emacs=        |
| =~/.emacs.d/init.el=            | =~/.emacs.d/init.el=                          | =~/.emacs.d/init.el=               |
| =~/.emacs.d/init.elc=           | =~/.emacs.d/init.el= or =~/.emacs.d/init.elc= | =~/.emacs.d/init.el=               |

#+name: user-init-file-names
#+begin_src elisp -r -n
  (default "~/.emacs")
  (~/_emacs (file-truename "~/_emacs"))
  (~/_emacs.el (file-truename "~/_emacs.el"))
  (~/_emacs.elc (file-truename "~/_emacs.elc"))
  (~/.emacs (file-truename "~/.emacs"))
  (~/.emacs.el (file-truename "~/.emacs.el"))
  (~/.emacs.elc (file-truename "~/.emacs.elc"))
  (~/.emacs.d/init.el (file-truename "~/.emacs.d/init.el"))
  (~/.emacs.d/init.elc (file-truename "~/.emacs.d/init.elc"))
#+end_src

#+name: customize-this-reference
#+begin_src elisp -r -n
    (defvar actual-user-init-file
      (let (
            <<user-init-file-names>>
            )
        (or (when (equal user-init-file nil)
              (or (cl-find-if #'file-exists-p (list ~/.emacs.d/init.el
                                                    ~/_emacs
                                                    ~/_emacs.el
                                                    ~/.emacs
                                                    ~/.emacs.el))
                  ~/.emacs.d/init.el))
            (when (equal user-init-file default)
              ~/.emacs)
            (when (file-equal-p user-init-file ~/_emacs)
              ~/_emacs)
            (when (file-equal-p user-init-file ~/_emacs.el)
              ~/_emacs.el)
            (when (file-equal-p user-init-file ~/_emacs.elc)
              (or (when (file-exists-p ~/_emacs.el)
                   ~/_emacs.el)
                  ~/_emacs))
            (when (file-equal-p user-init-file ~/.emacs)
              ~/.emacs)
            (when (file-equal-p user-init-file ~/.emacs.el)
              ~/.emacs.el)
            (when (file-equal-p user-init-file ~/.emacs.elc)
              (or (when (file-exists-p ~/.emacs.el)
                   ~/.emacs.el)
                  ~/.emacs))
            (when (or (file-equal-p user-init-file ~/.emacs.d/init.el)
                      (file-equal-p user-init-file ~/.emacs.d/init.elc))
              ~/.emacs.d/init.el))))
#+end_src

Исходный код лисп-программы инициализации в файле
actual-user-init-file вторичен по отношению к этому руководству, это
не более чем автоматически сгенерированная из него программа. Но что
если руководства не окажется в директории с настройками эмакса, и мы
не сможем регенерировать лисп-программу инициализации? В таком случае
программа инициализации должна попытаться скачать руководство из
интернета.

#+name: try-to-download-this-reference-when-it-is-missing
#+begin_src elisp -r -n
  (unless (file-exists-p well-tuned-emacs-reference-file)
    (condition-case nil
        (progn
          (message "Trying to download %s and save it as %s." well-tuned-emacs-reference-url
                   (file-truename well-tuned-emacs-reference-file))
          (with-temp-file well-tuned-emacs-reference-file
            (url-insert-file-contents well-tuned-emacs-reference-url)))
      (error
       (message "Failed to download %s and save it as %s." well-tuned-emacs-reference-url
                (file-truename well-tuned-emacs-reference-file))
       (when (file-exists-p well-tuned-emacs-reference-file)
         (delete-file well-tuned-emacs-reference-file 'move-to-trash)))))
#+end_src

Прежде мы должны условиться, что это руководство будет храниться в
определенном месте, по умолчанию --- в той же директории, что и
актуальная лисп-программа инициализации эмакса; под определенным
именем, по-умолчанию ---
[[elisp:(find-file (concat (file-name-directory user-init-file) "README.org"))][README.org]].
Так же нам должен быть известен адрес свежей версии этого руководства
в интернете. Встроенное в эмакс средство
[[http://www.gnu.org/software/emacs/manual/html_node/elisp/Customization.html#Customization][Customize]]
позволит нам сделать настройки расположения файлов руководства
полностью независимыми от прописанных в этом руководстве значений
по-умолчанию. Потом эти настройки можно будет изменить в самом эмаксе
и сохранить их значения на будущее, не меняя ни фрагменты кода в этом
руководстве, ни код в сгенерированной лисп-программе
инициализации. Для этого создадим в группе кастомизации
[[elisp:(customize-group-other-window 'initialization)][Initialization]]
подгруппу
[[elisp:(customize-group-other-window 'well-tuned-emacs)][Well Tuned Emacs]].

#+name: customize-this-reference
#+begin_src elisp -r -n
  (defgroup well-tuned-emacs nil
    "Well Tuned Emacs initialization and customization settings."
    :link '(url-link "https://gitlab.com/zahardzhan/well-tuned-emacs")
    :version "25.0.50.1"
    :group 'initialization)
#+end_src

Добавим в эту группу две пользовательские настройки.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲
[[elisp:(customize-group-other-window 'environment)][Environment]]⊲
[[elisp:(customize-group-other-window 'initialization)][Initialization]]⊲
[[elisp:(customize-group-other-window 'well-tuned-emacs)][Well Tuned Emacs]]⊲
[[elisp:(customize-variable-other-window%20'well-tuned-emacs-reference-file)][Well Tuned Emacs Reference File]] 
← файл [[elisp:(find-file (concat (file-name-directory user-init-file) "README.org"))][README.org]]
в [[elisp:(dired (file-name-directory actual-user-init-file))][директории с актуальной лисп-программой инициализации эмакса]].
Расположение файла этого руководства. Для обеспечения переносимости
путей файлов между разными средами исполнения эмакс-лисп кода их
следует указывать в формате
[[https://en.wikipedia.org/wiki/Path_(computing)][POSIX]], это
позволит использовать один-и-тот-же файл одновременно с двух
запущенных в разных средах экземпляров эмакса (например
Windows/Cygwin).

| actual-user-init-file                                      | well-tuned-emacs-reference-file                  |
|------------------------------------------------------------+--------------------------------------------------|
| =~/.emacs= or =~/.emacs.el= or =~/_emacs= or =~/_emacs.el= | =~/README.org= or =~/.emacs.d/README.org=        |
| =~/.emacs.d/init.el=                                       | prefer =~/.emacs.d/README.org= to =~/README.org= |

#+name: customize-this-reference
#+begin_src elisp -r -n
  (defcustom well-tuned-emacs-reference-file
    (let* (
           <<user-init-file-names>>
           (wter-file-name "README.org")
           (wter-file-at-home (file-truename (concat (file-name-as-directory "~") wter-file-name)))
           (wter-file-at-emacs-dir (file-truename (concat user-emacs-directory wter-file-name))))
      (ignore default ~/_emacs.elc  ~/.emacs.elc ~/.emacs.d/init.elc)
      (or (when (or (equal actual-user-init-file ~/.emacs)
                    (equal actual-user-init-file ~/.emacs.el)
                    (equal actual-user-init-file ~/_emacs)
                    (equal actual-user-init-file ~/_emacs.el))
            (or (when (file-exists-p wter-file-at-home)
                  wter-file-at-home)
                wter-file-at-emacs-dir))
          (when (equal actual-user-init-file ~/.emacs.d/init.el)
            (or (when (file-exists-p wter-file-at-emacs-dir)
                  wter-file-at-emacs-dir)
                (when (file-exists-p wter-file-at-home)
                  wter-file-at-home)
                wter-file-at-emacs-dir))))
    "The Well Tuned Emacs Reference file."
    :type 'file
    :group 'well-tuned-emacs)
#+end_src

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲
[[elisp:(customize-group-other-window 'environment)][Environment]]⊲
[[elisp:(customize-group-other-window 'initialization)][Initialization]]⊲
[[elisp:(customize-group-other-window 'well-tuned-emacs)][Well Tuned Emacs]]⊲
[[elisp:(customize-variable-other-window 'well-tuned-emacs-reference-file)][Well Tuned Emacs Reference URL]] 
← https://gitlab.com/zahardzhan/well-tuned-emacs/raw/master/README.org.
Адрес свежей версии этого руководства в интернете.

#+name: customize-this-reference
#+begin_src elisp -r -n
  (defcustom well-tuned-emacs-reference-url
    "https://gitlab.com/zahardzhan/well-tuned-emacs/raw/master/README.org"
    "The Well Tuned Emacs Reference File on the internet."
    :type 'string
    :group 'well-tuned-emacs)
#+end_src

Лисп-программа [[elisp:customize][M-x customize]], ставшая частью
эмакса в середине девяностых --- это краеугольный камень всей системы
пользовательских настроек. Парадоксально, но подавляющее большинство
фреймворков и личных настроек, доступных в сети, всеми силами избегают
настройки эмакса с помощью встроенного в него интерфейса
предназначенного именно для этой цели. Люди предпочитают настраивать
эмакс написанием своего лисп-кода даже в тех случаях, когда этот лисп-код
уже предусмотрительно написан, отлажен и задокументирован
разработчиками лисп-программ, которые пользователь пытается
настроить. Этот
[[http://c2.com/cgi/wiki?NotInventedHereSyndrome][фатальный недостаток]]
распространен повсеместно, но большинство пользователей эмакса считает
такое положение дел нормальным.

Истина состоит в том, что GNU Emacs 25 имеет 3440 стандартных
настройки в конфигурации по-умолчанию. Все они хорошо организованны,
задокументированны и доступны для поиска и изменения в простом удобном
и непривычном псевдографическом интерфейсе. Эти настроки сохраняются
между сессиями эмакса, и многие из них выполнены в виде специфических
лисп-программ. Подключение дополнительных модулей и пакетов расширений
эмакса может запросто увеличить количество таких настроек до десяти
тысяч. К чему приведет попытка изменения нескольких тысяч параметров
управляемых лисп-кодом, меняющимся от версии-к-версии, написанием
своего лисп-кода? Она практически неизбежно приведет к
[[http://www.emacswiki.org/emacs/DotEmacsBankruptcy][конфигурационному апокалипсису]].
Поэтому здесь и далее, и везде где только можно, я буду использовать
систему Customize.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲
[[elisp:(customize-group-other-window 'help)][Help]]⊲
[[elisp:(customize-group-other-window 'customize)][Customize]]⊲
[[elisp:(customize-variable-other-window 'custom-file)][Custom File]] 
← [[elisp:(concat (file-name-as-directory (concat user-emacs-directory "custom")) "custom.el")][~/.emacs.d/custom/custom.el]].
По-умолчанию Customize хранит свои данные в лисп-программе
инициализации эмакса; если мы переплетем этот файл --- все наши
настройки пропадут. В Customize можно выполнить настройку самой
Customize, но фактически эта программа не может изменить место
хранения своих данных, при том что такой параметр в ней есть ---
информация о том какой файл будет загружен хранится в самом этом
файле, таким образом эта информация недоступна извне. Мы будем хранить
настройки выполненные программой Customize в файле custom.el в
директории ~/.emacs.d/custom.

#+name: customize-customize-and-apply-customizations
#+begin_src elisp -r -n
  (let ((custom-directory (file-name-as-directory (concat user-emacs-directory "custom"))))
    (setq custom-file (concat custom-directory "custom.el"))
    (unless (file-exists-p custom-directory)
      (make-directory custom-directory 'with-parents))
    (when (file-exists-p custom-file)
      (load custom-file)))
#+end_src

Чтобы не /переплетать/ программу инициализации эмакса вручную после
каждого редактирования этого руководства, сделаем так, что программа
будет переплетать сама себя прямо во время запуска эмакса, если
руководство было изменено после изменения программы.

#+name: this-reference-is-in-its-place-and-is-newer-than-user-init-file
#+begin_src elisp -r -n
  (when (file-exists-p well-tuned-emacs-reference-file)
    (or (not (file-exists-p actual-user-init-file))
        (file-newer-than-file-p well-tuned-emacs-reference-file actual-user-init-file)))
#+end_src

По всей видимости нет никакого тривиального способа заставить
программу org-babel-tangle должным образом обрабатывать свойство
:tangle и связанный с ним аргумент target-file, указывающий в какой
именно файл нужно сохранить сплетенную программу, поэтому применим
небольшой хак с перекрытием области видимости глобальной переменной
user-init-file на время сплетения и загрузки.

#+name: tangle-this-reference-into-user-init-file-and-then-load-it-again
#+begin_src elisp -r -n
  (progn
    (require 'ob-tangle)
    (message "Tangling %s → %s." well-tuned-emacs-reference-file actual-user-init-file)
    (let ((user-init-file actual-user-init-file))
      (org-babel-with-temp-filebuffer well-tuned-emacs-reference-file
        (org-babel-tangle))
      (load-file user-init-file)
      (message "Tangled and loaded %s." user-init-file)))
#+end_src

Как вариант, во время загрузки лисп-программы инициализации мы можем
ее скомпилировать. Для этого нам понадобится лисп-программа
байт-компиляции лисп-программ bytecomp. Следующая строка кода это
своего рода шутка(нет) --- она загружает лисп-программу байт-компиляции
лисп-программ во время байт-компиляции нашей лисп-программы
лисп-программой байт-компиляции лисп-программ.

#+name: requirements
#+begin_src elisp -r -n
  (cl-eval-when (compile) (require 'bytecomp))
#+end_src

При интерпретации лисп-программы инициализации эмакса программа для
сплетения этого руководства ob-tangle загружается по необходимости
непосредственно перед её использованием, и это не создает никаких
проблем. Однако программа компиляции по возможности должна знать обо
всех сторонних лисп-программах, которые могут быть загружены во время
выполнения скомпилированной программы инициализации эмакса.

#+name: requirements
#+begin_src elisp -r -n
  (cl-eval-when (compile) (require 'ob-tangle))
#+end_src

Определим переменную-условие компиляции программы инициализации эмакса
well-tuned-emacs-compile-user-init-file как опцию в группе настроек
этого руководства.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲
[[elisp:(customize-group-other-window 'environment)][Environment]]⊲
[[elisp:(customize-group-other-window 'initialization)][Initialization]]⊲
[[elisp:(customize-group-other-window 'well-tuned-emacs)][Well Tuned Emacs]]⊲
[[elisp:(customize-variable-other-window 'well-tuned-emacs-reference-file)][Well Tuned Emacs Compile User Init File]] 
← nil. Указание компилировать лисп-программу инициализации эмакса. При
автоматической установке сохраненного значения этой опции системой
Customize, а также при ручном включении/отключении этой опции в
интерфейсе Customize, эмакс должен соответственно скомпилировать, или
удалить скомпилированную программу инициализации. Для этого нам нужно
написать функцию которая позаботится обо всем при установке значения
этой опции.

#+name: customize-this-reference
#+begin_src elisp -r -n
  (defcustom well-tuned-emacs-compile-user-init-file nil
    "Compile or don't compile well-tuned Emacs user init file."
    :type 'boolean
    :set
    <<set-well-tuned-emacs-compile-user-init-file-custom-option>>
    :version "25.0.50.1"
    :group 'well-tuned-emacs)
#+end_src

Загрузка эмакса становится довольно запутанной если добавить в нее
возможность компиляции файла инициализации. С учетом описания того как
происходит
[[http://www.gnu.org/software/emacs/manual/html_node/elisp/Byte-Compilation.html#Byte-Compilation][компиляция лисп-программ эмакса]],
[[http://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html][запуск эмакса]],
[[http://www.gnu.org/software/emacs/manual/html_node/elisp/How-Programs-Do-Loading.html#How-Programs-Do-Loading][загрузка лисп-программ эмакса]],
и того что происходит в нашей программе инициализации, мы должны
учесть шесть возможных последовательностей выполнения лисп-программ
при запуске эмакса:

1. el→emacs [safe]
2. el→tangle→el→emacs [safe]
3. el→tangle→compile→elc→emacs [safe]
4. elc→emacs [safe]
5. elc→tangle→el↛emacs [unsafe (package-initialize)⇝user-init-file⇎load-file-name]
6. elc→tangle→compile↛elc→emacs [unsafe (byte-compile elc)⇝cannot rename elc↦elc]

Компилировать или удалять программу инициализации прямо во время ее
выполнения рискованно, поэтому шесть возможных вариантов развития
событий в итоге сводятся к четырем.

|              | compile                                              | delete                    |
|--------------+------------------------------------------------------+---------------------------|
| *while init* | compile after init                                   | delete after init         |
| *after init* | compile el when there is no elc or elc older than el | delete elc if there is el |

Таким образом, когда мы устанавливаем значение этой опции во время
инициализации эмакса, выполнение соответствующих действий
откладывается на потом.

#+name: set-well-tuned-emacs-compile-user-init-file-custom-option
#+begin_src elisp -r -n
  (progn
    (defun set-well-tuned-emacs-compile-user-init-file (&optional symbol value)
      (when symbol (set symbol value))
      (let ((while-init-time (not after-init-time)))
        (cond (while-init-time
               (add-hook 'after-init-hook 'set-well-tuned-emacs-compile-user-init-file))
              (after-init-time
               (require 'bytecomp)
               (if well-tuned-emacs-compile-user-init-file
                   <<compile-el-when-there-is-no-elc-or-elc-older-than-el>>
                 <<delete-elc-if-there-is-el>>
                 )))))
    (lambda (symbol value)
      (set-well-tuned-emacs-compile-user-init-file symbol value)))
#+end_src

Компилируем лисп-программу инициализации только если скомпилированная
программа старее, или её вовсе нет.

#+name: compile-el-when-there-is-no-elc-or-elc-older-than-el
#+begin_src elisp  -r -n
  (when (file-exists-p actual-user-init-file)
    (byte-recompile-file actual-user-init-file nil 0))
#+end_src

Просто удаляем скомпилированную программу инициализации, если у нас
есть исходная программа инициализации.

#+name: delete-elc-if-there-is-el
#+begin_src elisp  -r -n
  (when (and (file-exists-p actual-user-init-file)
             (file-exists-p (byte-compile-dest-file actual-user-init-file)))
    (delete-file (byte-compile-dest-file actual-user-init-file)))
#+end_src

Осталось нанести последний штрих и общая программа инициализации
эмакса будет готова. Система пакетов вошла в состав эмакса несколько
лет назад, но все еще активно развивается и в некоторых местах требует
ручного вмешательства. Если мы ею воспользуемся, система пакетов
добавит код своей инициализации в сгенерированную программу
инициализации эмакса. Чтобы этого избежать, достаточно добавить этот
код самим, и сразу после этого
[[elisp:(package-list-packages)][установить свои любимые пакеты]].

#+name: initialize-package-system-and-install-user-selected-packages
#+begin_src elisp -r -n
  (package-initialize)
  <<package-system-backports>>
  (unless (cl-every #'package-installed-p package-selected-packages)
    (package-refresh-contents)
    (ignore-errors (or :maybe :don't :ignore)
      (package-install-selected-packages)))
#+end_src

Конечно, перед автоматической установкой пакетов эмакс должен знать
какие именно пакеты устанавливать и откуда их брать.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲
[[elisp:(customize-group-other-window 'applications)][Applications]]⊲
[[elisp:(customize-group-other-window 'package)][Package]]⊲
[[elisp:(customize-variable-other-window 'package-archives)][Package Archives]] 
← адреса архивов. По-умолчанию эмакс устанавливает пакеты из
официального архива [[http://elpa.gnu.org/][GNU ELPA]]. В этом архиве
мало пакетов, но они надежные и доверенные. В неофициальных архивах
[[https://melpa.org][MELPA]]() и
[[https://marmalade-repo.org/][Marmalade]]() пакетов гораздо больше,
но они менее качественные.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲
[[elisp:(customize-group-other-window 'applications)][Applications]]⊲
[[elisp:(customize-group-other-window 'package)][Package]]⊲
[[elisp:(customize-variable-other-window 'package-selected-packages)][Package Selected Packages]] 
← имена вручную установленных пакетов. Каждый раз когда пользователь
эмакса лично выбирает и устанавливает нужный ему пакет, эмакс
сохраняет имя этого пакета в списке-значении переменной-опции
package-selected-packages. Сама эта настройка
[[http://endlessparentheses.com/new-in-package-el-in-emacs-25-1-user-selected-packages.html][появились только в GNU Emacs 25]].
В GNU Emacs 24 и более ранних версиях эмакса этой настройки нет;
придется добавить ее самим.

#+name: package-system-backports
#+begin_src elisp -r -n
  (unless (boundp 'package-selected-packages)
    (defcustom package-selected-packages nil
      "Store here packages installed explicitly by user.
  This variable is fed automatically by Emacs when installing a new
  package in Emacs 25 and higher. You can use it to (re)install
  packages on other machines by running
  `package-install-selected-packages'."
      :type '(repeat symbol)
      :group 'package))
#+end_src

В новых версиях эмакса с опцией package-selected-packages связано
гораздо больше функциональности, чем имело бы смысл портировать в
старые версии эмакса. Но функция package-install-selected-packages
того стоит --- она автоматически устанавливает ваши любимые пакеты, по
списку.

#+name: package-system-backports
#+begin_src elisp -r -n
  (unless (fboundp 'package-install-selected-packages)
    (defun package-install-selected-packages ()
      "Ensure packages in `package-selected-packages' are installed.
  If some packages are not installed propose to install them."
      (interactive)
      (if (not package-selected-packages)
          (message "‘package-selected-packages’ is empty, nothing to install")
        (cl-loop for package in package-selected-packages
                 unless (package-installed-p package)
                 collect package into packages-to-be-installed
                 finally
                 (if packages-to-be-installed
                     (when (y-or-n-p
                            (format "%s packages will be installed:\n%s, proceed?"
                                    (length packages-to-be-installed)
                                    (mapconcat #'symbol-name packages-to-be-installed ", ")))
                       (cl-loop for package in packages-to-be-installed do (package-install package)))
                   (message "All your packages are already installed"))))))
#+end_src

На этом описание основной части программы инициализации
завершено. Дальнейший текст рассказывает о важных стандартных
настройках, нестандартных сочетаниях клавиш и конфигурации
установленных пакетов.

----------------------------------------------------------------------

Идейный преемник проекта
[[https://github.com/technomancy/emacs-starter-kit][Emacs Starter Kit]] ---
проект [[https://github.com/technomancy/better-defaults][Better Defaults]],
выполнен [[http://technomancy.us/][Филом Хагельбергом]]
[[[http://sachachua.com/blog/2014/05/emacs-chat-phil-hagelberg/][интервью]]]
в виде пакета с небольшой лисп-программой. Эта лисп-программа, каждая
строка которой тщательно отобрана сообществом, устанавливает значения
пары десятков стандартных параметров в обход стандартной системы
управления этими параметрами. Трудно найти более противоречивый
проект. В некотором смысле, это образцово-показательный забег по
граблям. На мой взгляд, если современный Starter Kit стал гайдом, то
логично было бы сделать гайдом и Better Defaults. Ниже я привожу
ссылки на кастомизации некоторых ключевых параметров эмакса с
пояснением причин по которым их стоит сделать. Списки сделанных
настроек показывают лисп-программы
[[elisp:customize-saved][M-x customize-saved]] и
[[elisp:customize-unsaved][M-x customize-unsaved]]. Конечно, система
кастомизации не всемогуща и для некоторых настроек (например,
нестандартные сочетания клавиш) придется написать несколько строк кода
на лиспе. В общем виде весь последующий код выглядит так:

#+name: load-packages-and-apply-advanced-customizations
#+begin_src elisp -r -n
<<definitions>>
<<customizations>>
<<keybindings>>
#+end_src

Начнем кастомизацию эмакса сверху и продолжим последовательно
углубляться во всё более тонкие аспекты его работы.

[[elisp:(describe-variable 'frame-title-format)][Frame Title Format]] 
← имя буфера или полное имя файла/директории предваренное именем
пользователя и машины при удаленном подключении. Как ни странно,
заголовок фрейма (окна в оконном менеджере операционной системы) не
кастомизируется стандартными средствами. Если открыто несколько
фреймов, заголовок по-умолчанию совершенно бесполезен, поэтому
используем наипростейший формат, позволяющий отличить один фрейм от
другого.

#+name: customizations
#+begin_src elisp -r -n
  (setq-default frame-title-format
   '(:eval (concat (when (file-remote-p default-directory)
                     (let ((user (file-remote-p default-directory 'user))
                           (host (file-remote-p default-directory 'host)))
                       (format "%s@%s:" user host)))
                   (or buffer-file-truename dired-directory (buffer-name)))))
#+end_src

# TODO · after buffer name when unsaved changes

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲
[[elisp:(customize-group-other-window 'environment)][Environment]]⊲
[[elisp:(customize-group-other-window 'frames)][Frames]]⊲
[[elisp:(customize-variable-other-window 'menu-bar-mode)][Menu Bar Mode]] 
← nil. 80% опций главном в меню эмакса никогда не используются,
остальные 20% продублированы в меню моделайна; меню буферов вызывается
C-F10 и по C-Left-Click в любом месте буфера, глобальное меню --- по
C-Right-Click, само главное меню --- клавишей F10. Разумнее всего
отключить главное меню и включать его при необходимости сочетанием C-x
F10 (вариант C-M-F10 не подходит для Cygwin и Linux).

#+name: keybindings
#+begin_src elisp -r -n
  (global-set-key (kbd "C-x <f10>") 'toggle-menu-bar-mode-from-frame)
#+end_src

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲
[[elisp:(customize-group-other-window 'environment)][Environment]]⊲
[[elisp:(customize-group-other-window 'frames)][Frames]]⊲
[[elisp:(customize-variable-other-window 'tool-bar-mode)][Tool Bar Mode]] 
← nil. Тулбар в эмаксе абсолютно бесполезен.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲
[[elisp:(customize-group-other-window 'environment)][Environment]]⊲
[[elisp:(customize-group-other-window 'frames)][Frames]]⊲
[[elisp:(customize-variable-other-window 'scroll-bar-mode)][Scroll Bar Mode]] 
← right. Многие отключают полосу прокрутки по трем причинам: она не
является частью стандартного интерфейса эмакса, она плохо реализована
и эстетически убога. Но в то же время, нельзя отрицать ее очевидную
пользу в графических средах даже в таком неполноценном виде.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲
[[elisp:(customize-group-other-window 'environment)][Environment]]⊲
[[elisp:(customize-group-other-window 'frames)][Frames]]⊲
[[elisp:(customize-group-other-window 'window-divider)][Window Divider]]⊲
[[elisp:(customize-variable-other-window 'window-divider-mode)][Window Divider Mode]] 
← nil. Визуальное разделение окон полосой позволяет менять размеры
окон мышкой. Полезная опция при включенных полосах прокрутки. Выглядит
старомодно, но в группе есть настройки стиля.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲
[[elisp:(customize-group-other-window 'environment)][Environment]]⊲
[[elisp:(customize-group-other-window 'frames)][Frames]]⊲
[[elisp:(customize-face-other-window 'fringe)][Fringe face]] 
← (t nil). Во всех текстовых редакторах (начиная с блокнота) принято
иметь небольшие поля по краям области редактирования текста. Поля
обязательно должны быть цвета фона чтобы не акцентировать внимание на
артефактах рендеринга полосы
прокрутки. [[elisp:(customize-themes)][Цветовые темы]] эмакса меняют
цвета фона и полей, поэтому каждый раз при изменении темы нам нужно
чтобы цвет полей соответствовал цвету фона. Для этого используем
средство
[[https://en.wikipedia.org/wiki/Aspect-oriented_programming][аспектно-ориентированного программирования]]
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html#Advising-Functions][Advice]],
которое позволит изменить поведение функций сторонних лисп-программ
без изменения их оригинальной реализации. Функции-аспекты должны иметь
как минимум такой же список аргументов, что и оригинальные функции, но
байт-компилятор будет ругаться, если эти аргументы не будут
использоваться, поэтому имена неиспользуемых аргументов 
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Lexical-Binding.html][должны начинаться с подчеркивания]].

#+name: definitions
#+begin_src elisp -r -n
  (defun set-transparent-fringe-background (_theme &optional _no-confirm _no-enable)
    (set-face-background 'fringe (face-attribute 'default :background)))
#+end_src

#+name: customizations
#+begin_src elisp -r -n
  (advice-add 'load-theme :after 'set-transparent-fringe-background)
#+end_src

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲
[[elisp:(customize-group-other-window 'environment)][Environment]]⊲
[[elisp:(customize-group-other-window 'frames)][Frames]]⊲
[[elisp:(customize-variable-other-window 'indicate-empty-lines)][Indicate Empty Lines]] 
← nil. Штриховка на полях изящно выделяет пустую область за гранью
буфера, но иногда отвлекает.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲
[[elisp:(customize-group-other-window 'environment)][Environment]]⊲
[[elisp:(customize-group-other-window 'initialization)][Initialization]]⊲
[[elisp:(customize-variable-other-window 'initial-buffer-choice)][Initial Buffer Choice]] 
← remember-notes. Вместо напыщенного стартового экрана эмакс открывает
заметки, буфер =*​scratch​*=, файл, директорию или все что угодно, на
выбор.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲
[[elisp:(customize-group-other-window 'data)][Data]]⊲
[[elisp:(customize-group-other-window 'remember)][Remember]]⊲
[[elisp:(customize-variable-other-window 'remember-notes-initial-major-mode)][Remember Notes Initial Major Mode]] 
← initial-major-mode. Режим редактирования заметок. По-умолчанию
предполагается, что это заметки с лисп-кодом для эмакса, но можно
заменить на варианты вроде
[[elisp:(customize-save-variable 'remember-notes-initial-major-mode 'text-mode)][text-mode]],
[[elisp:(customize-save-variable 'remember-notes-initial-major-mode 'fundamental-mode)][fundamental-mode]],
[[elisp:(customize-save-variable 'remember-notes-initial-major-mode 'org-mode)][org-mode]],
или что-угодно еще. В группе кастомизации
[[elisp:(customize-group 'remember 'other-window)][Remember]] можно указать
[[elisp:(customize-variable-other-window 'remember-data-file)][расположение файла с заметками]],
например ~/Dropbox/Заметки, и много других вещей.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲
[[elisp:(customize-group-other-window 'environment)][Environment]]⊲
[[elisp:(customize-group-other-window 'initialization)][Initialization]]⊲
[[elisp:(customize-variable-other-window 'initial-scratch-message)][Initial Scratch Message]] 
← bla-bla-bla. Эмакс
[[http://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html][всегда]]
открывает =*scratch*=-буфер после запуска.  От него невозможно
избавиться, но можно сделать
[[http://ergoemacs.org/emacs/modernization_scratch_buffer.html][более полезным]],
если добавить в него несколько ссылок на домашнюю директорию,
зашифрованный эмаксом (см. [[https://ru.wikipedia.org/wiki/GnuPG][GNU Privacy Guard]])
файл с личными паролями, активные проекты, сайты и прочее.

#+name: customizations
#+begin_src elisp -r -n
  (add-hook 'emacs-startup-hook
            '(lambda ()
               (with-current-buffer "*scratch*"
                 (save-excursion
                   (let ((initial-scratch-message-end-point (1- (point-max))))
                     (goto-char initial-scratch-message-end-point)
                     (fancy-splash-insert
                      "To start: "
                      :link `("open file"
                              ,(lambda (_button) (call-interactively 'find-file))
                              "Specify a new file's name, to edit the file")
                      ", "
                      :link `("open home directory"
                              ,(lambda (_button) (dired "~"))
                              "Open your home directory, to operate on its files")
                      " or "
                      :link `("open password vault"
                              ,(lambda (_button) (ignore-errors (find-file "~/Dropbox/Passwords.org.gpg")))
                              "Open your encrypted file with passwords.")
                      ".")
                     (comment-region initial-scratch-message-end-point (point)))
                   (when (buffer-modified-p)
                     (set-buffer-modified-p nil))))))
#+end_src

--------------------------------------------------------------------------------

отключение звоночка

(customize-face-other-window 'default) ← руками не трогать.

Кастомизация шрифтов в эмаксе чрезвычайно специфична и
системно-зависима. Это одно из немногих исключений из правил, когда
проще написать свой велосипед, чем использовать стандартные средства.

[[https://en.wikipedia.org/wiki/Cambria_(typeface)][Cambria-11]]
очень хороша в Windows 10. Как писал создатель языка C++: «В коде
программ [на C++] в этой книге [«Язык программирования C++»]
используется пропорциональный шрифт [полужирный италик с
засечками]. На первый взгляд такое написание кажется неестественным
для программистов, привыкших видеть шрифт с буквами одинаковой
ширины. Однако пропорциональный шрифт легче и лучше воспринимается,
чем моноширинный. Использование пропорционального шрифта также
позволяет избежать многих неестественных разрывов строк в коде. Более
того, мои эксперименты показали. что большинство людей через некоторое
время считают новый стиль более читабельным».

[[https://en.wikipedia.org/wiki/Consolas][Consolas-10]] ---
моноширинный шрифт по-умолчанию в Windows 10.

[[https://en.wikipedia.org/wiki/Courier_(typeface)#Courier_New][Courier New-9]] ---
классика жанра.

[[https://en.wikipedia.org/wiki/Monaco_(typeface)][Monaco-9/12]] ---
моноширинный шрифт по-умолчанию в ранних версиях Mac OS X.

[[https://en.wikipedia.org/wiki/Menlo_(typeface)][Menlo]] ---
моноширинный шрифт по-умолчанию в современных версиях Mac OS X.

[[http://www.marksimonson.com/fonts/view/anonymous-pro][Anonymous Pro-11]],
[[https://damieng.com/blog/2008/05/26/envy-code-r-preview-7-coding-font-released][Envy Code R-10]]
и другие моноширинные шрифты для программирования.

# Put this lisp in your .emacs (thanks Sean Farley for putting this together):

# (when (window-system)
# (set-default-font "Fira Code"))
# (let ((alist '((33 . ".\\(?:\\(?:==\\)\\|[!=]\\)")
#                (35 . ".\\(?:[(?[_{]\\)")
#                (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
#                (42 . ".\\(?:\\(?:\\*\\*\\)\\|[*/]\\)")
#                (43 . ".\\(?:\\(?:\\+\\+\\)\\|\\+\\)")
#                (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
#                (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=]\\)")
#                (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
#                (58 . ".\\(?:[:=]\\)")
#                (59 . ".\\(?:;\\)")
#                (60 . ".\\(?:\\(?:!--\\)\\|\\(?:\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[/<=>|-]\\)")
#                (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
#                (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
#                (63 . ".\\(?:[:=?]\\)")
#                (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
#                (94 . ".\\(?:=\\)")
#                (123 . ".\\(?:-\\)")
#                (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
#                (126 . ".\\(?:[=@~-]\\)")
#              )
#       ))
# (dolist (char-regexp alist)
#   (set-char-table-range composition-function-table (car char-regexp)
#                         `([,(cdr char-regexp) 0 font-shape-gstring]))))

Indent Tabs Mode

show paren mode - on

--------------------------------------------------------------------------------

[[elisp:(customize-group-other-window Режим"emacs" 'other-windows)][Emacs]]⊲
[[elisp:(customize-group "i18n" 'other-window)][I18n]]⊲
[[elisp:(customize-group "mule" 'other-window)][MULE Internationalization]]⊲
[[elisp:(customize-variable-other-window 'default-input-method)][Default Input Method]] 
← russian-computer. Эмакс использует независимое от операционной
системы переключение языков и методов ввода для обеспечения своей
работы в очень разных средах. Переключение на русский язык по C-\ без
предварительного указания метода ввода требует кастомизации.

----------------------------------------------------------------------

Сочетания клавиш в эмаксе имеют три ярко выраженных особенности: их
/очень/ много; их трудно запомнить; и они вызывают повреждения рук при
злоупотреблении. Для снижения нагрузки на левую руку при вводе команд
эмакса многие люди советуют
[[http://www.emacswiki.org/emacs/MovingTheCtrlKey][поменять местами клавиши Caps Lock и Control]].
Раньше я так и делал, но этого явно недостаточно. На современных
стандартных клавиатурах кнопку Caps Lock нажимать удобнее, чем
Control, но это не избавляет от нагрузки на левую руку, а всего лишь
незначительно снижает ее. Лучше полностью отказаться от клавиш Control
и Caps Lock и использовать в качестве модификатора «C-» зажатую
клавишу «пробел». Решение не идеальное, но для здоровья рук оно
полезнее, чем Caps ⇆ Ctrl.

Сочетание клавиш C-w --- де-факто стандарт для удаления слова слева от
курсора.

#+name: definitions
#+begin_src elisp -r -n
  (defun backward-kill-word-or-kill-region (arg)
    (interactive "p")
    (if (region-active-p)
        (kill-region (region-beginning) (region-end))
      (backward-kill-word arg)))
#+end_src

#+name: keybindings
#+begin_src elisp -r -n
  (global-set-key (kbd "C-w") #'backward-kill-word-or-kill-region)
  (define-key minibuffer-local-map (kbd "C-w") #'backward-kill-word-or-kill-region)
  (add-hook 'ido-setup-hook
            (lambda ()
              (when (boundp 'ido-completion-map)
                (define-key ido-completion-map (kbd "C-w") #'ido-delete-backward-word-updir))))
#+end_src

----------------------------------------------------------------------

Следует быть осторожным при указании относительных путей:
[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Windows-HOME.html][в Windows Vista/7/8/10]]
эмакс считает своей домашней директорией ~ значение переменной
окружения (getenv "AppData")→C:\Users\User\AppData\Roaming, в то время
как в UNIX-совместимых ОС подразумевается директория (getenv
"UserProfile")→C:\Users\User. Чтобы избежать неоднозначности нужно
установить значение переменной окружения HOME в Windows.

#+begin_src elisp -r -n
  (when (eq system-type 'windows-nt)
    (setenv "Home" (getenv "UserProfile")))
 #+end_src

Установка рабочей директории (cd), в свойствах ярлыка.

----------------------------------------------------------------------

Исправления некоторых багов GNU Emacs:

[[http://wenshanren.org/?p=781][Emacs 25 testing: org-html-export returns org-html-fontify-code: Wrong number of arguments…]]

#+name: fix-some-bugs
#+begin_src elisp
  (when (= emacs-major-version 25)
    (defun org-font-lock-ensure ()
      (font-lock-ensure)))
#+end_src

----------------------------------------------------------------------

Роман Захаров [[mailto:zahardzhan@gmail.com][zahardzhan@gmail.com]] 1 октября 2015.

#+name: header
#+begin_src elisp
  ;; Copyright © 2015 Roman Zaharov <zahardzhan@gmail.com>

  ;; This file is not part of GNU Emacs.

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 3, or (at your option)
  ;; any later version. 

  ;;; Code:

#+end_src

#+name: footer
#+begin_src elisp
(provide 'well-tuned-emacs)
#+end_src
