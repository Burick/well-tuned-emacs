#+Title: Well Tuned Emacs
#+Author: Роман Захаров
#+Email: zahardzhan@gmail.com

#+Options: HTML-Postamble:nil # HTML-страница без футера
#+Options: ToC:nil # Оглавление
#+Options: Org-Display-Internal-Link-With-Indirect-Buffer:t # Внутренние ссылки из этого документа открываются в другом буфере
#+Options: ^:t # turn on/off TeX-like syntax for sub- and superscripts.  If
# you write "^:{}", a_{b} will be interpreted, but
# the simple a_b will be left as it is.
# #+Style: <link rel="stylesheet" type="text/css" href="well-tuned-emacs.css"/>

Emacs [“Editor MACroS”, /​/ˈeditər ˈmakrōs/​/ → /​/ˈemaks/​/, далее ---
«эмакс»] был создан давным давно в Лаборатории Искуственного Интллекта
Массачусетского Технологического института [[[https://en.wikipedia.org/wiki/MIT_Computer_Science_and_Artificial_Intelligence_Laboratory][MIT AI Lab]]] и несет в себе
черты очень своеобразной культуры лисп-хакеров былых времен. Эмакс это
текстовый редактор поведение и возможности которого можно изменить на
ходу просто написав в нем текст на языке программирования на котором
написан сам эмакс. Более того, тем же самым способом прямо во время
работы эмакса можно расширить возможности языка программирования на
котором он написан, что делает эмакс самой гибкой и универсальной
программой для работы с текстом в сравнении с любой другой.

За несколько десятилетий своего развития эмакс несколько раз
переписывался, постоянно улучшался и дополнялся многими тысячами новых
возможностей. Когда-то эмакс был просто мощным текстовым редактором,
но сейчас это всеобъемлющая кроссплатформенная программная среда в
которой можно делать абсолютно все что угодно, если это хотя бы
немного относится к работе с простым текстом, и даже больше.

Знающим людям такая универсальность играет на руку, ведь в одной среде
можно делать тысячу разных дел не прилагая усилий для переучивания к
разным интерфейсам. Новичков подобная универсальность и непривычность
поначалу пугает. Научиться пользоваться эмаксом, понять его идею
задача непростая и долгая; однако, если есть желание, лучше начать с
общего обзора
“[[http://www.gnu.org/software/emacs/tour/][A Guided Tour of Emacs]]”
на сайте проекта
[[http://www.gnu.org/philosophy/free-sw.ru.html][свободной]]
[[http://www.gnu.org/home.ru.html][операционной системы GNU]].

История возникновения эмакса подробно описана в рассказе Столлмана
«[[http://www.gnu.org/gnu/rms-lisp.ru.html][Мой опыт работы с лиспом и развитие GNU Emacs]]»;
эта история тесно связана с очень интересной
[[http://www.gnu.org/gnu/thegnuproject.ru.html][историей проекта GNU]]
из которой можно узнать, что GNU Emacs был первой программой проекта;
однако вся суть того что из себя представляет эмакс изложена в
документе написанном в 1981 году
“[[https://www.gnu.org/software/emacs/emacs-paper.html][EMACS: The Extensible, Customizable Display Editor]]” ---
и за прошедшие более чем 35 лет эта суть ничуть не изменилась.

Расширяемость эмакса одновременно его благословение и
проклятье. Пользователь не ограничен решениями которые ему предлагают
разработчики, и если ему нужна функциональность, которой нет в эмаксе
по-умолчанию, он может добавить ее сам. Конечно, в стандартной
поставке эмакс хорош, но не так хорош как мог бы быть. Потенциально он
обладает безграничными возможностями, но чтобы ими воспользоваться
придется взяться за настройку, а это подразумевает умение
программировать и плотное общение с сообществом, активность которого
со временем только увеличивается.

Настройка эмакса это своего рода декоративно-прикладное искусство; для
каждого конкретного пользователя она заключается в составлении
лисп-программы из фрагментов лисп-кода взятых из множества
разрозненных источников. Никакого другого способа в принципе нет, и
перед погружением в эту тему следует освоиться с программированием на
лиспе вообще и программированием на эмакс-лиспе в частности.

В изучении программирования поможет книга
«[[http://newstar.rinet.ru/~goga/sicp/sicp-ru-screen.pdf][Структура и интерпретация компьютерных программ]]» ---
это вводный курс по информатике в MIT; а в деле написания программ для
эмакса пригодится учебник
«[[http://alexott.net/ru/emacs/elisp-intro/elisp-intro-ru.html][Введение в программирование на Emacs Lisp]]»
и справочник
“[[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html][GNU Emacs Lisp Reference Manual]]”.

Такое напутствие врядли пробудит энтузиазм у тех, кому текстовый
редактор нужен только для того чтобы редактировать в нем текст; часто
эмакс при всей своей требовательности становится чем-то вроде
игрушки-конструктора у людей увлекающихся программированием.

Обычно создание удобной для себя конфигурации и ее последующая доводка
растягивается на очень продолжительное время: месяцы и даже
годы. Конечно, можно облегчить себе жизнь и установить фреймворк в
котором все основные настройки выполнены в соответствии с видением
автора фреймворка, и вам даже не придется править исходный код для
того чтобы просто пользоваться эмаксом в свое удовольствие. Вот самые
популярные фреймворки на гитхабе: [[https://github.com/syl20bnr/spacemacs][Spacemacs]],
[[https://github.com/bbatsov/prelude][Emacs Prelude]],
[[https://github.com/eschulte/emacs24-starter-kit][Eschulte Literate Emacs Starter Kit]],
[[https://github.com/overtone/emacs-live][Overtone Emacs Live]],
[[https://github.com/purcell/emacs.d][Purcell emacs.d]],
[[https://github.com/xiaohanyu/oh-my-emacs][Oh My Emacs]].

Все будет хорошо до тех пор пока вы не захотите встроить в эмакс некую
невероятную функциональность которой в фреймворке нет, и тогда вам
придется вручную интегрировать некий код не только с эмаксом, но и с
фреймворком, а для этого нужно будет разобраться с его внутренним
устройством, что сводит все его достоинства на нет.

К такому же выводу пришел автор одного из самых известных наборов
настроек
[[https://github.com/technomancy/emacs-starter-kit][Emacs Starter Kit]]
(см. [[http://www.google.com/search?q=meet+emacs+pluralsight+torrent][Meet Emacs]]),
когда закрывал свой проект после шести лет развития:

#+BEGIN_QUOTE
Старые версии Emacs Starter Kit были единой-для-всех кодовой базой
предназначавшейся для полной замены содержимого директории
~/.emacs.d. Это было очень популярное решение, но огромное количество
несвязанных между собой настроек вело к тому, что пользователю
приходилось просто привыкать к тому как все есть, при этом не обретая
реального понимания почему все настроенно именно таким образом. Когда
некоторые вещи ломались или вели себя непривычно, вы понятия не имели
где их исправить.

Я пришел к пониманию, что предпочтительнее использовать небольшие
пакеты дающие желаемую функциональность. Таким образом, вместо того
чтобы сваливать все настройки в одну большую кучу кода, Emacs Starter
Kit станет для вас лишь небольшим руководством. Как пользователю
Emacs, вам предстоит искать новые куски кода, настраивать их, и даже
писать свои собственные. Emacs Starter Kit поможет вам советами где
начать поиски и что именно искать, но сборка годной конфигурации это
личное дело каждого.
#+END_QUOTE

[[info:Emacs#Package][Система пакетов]] эмакса это встроенная в него [[elisp:list-packages][лисп-программа]]
которая автоматически скачивает и устанавливает другие лисп-программы,
расширяющие возможности эмакса. Система пакетов работает независимо от
операционной системы под которой запущен редактор, она сама
отслеживает зависимости между программами и заботится об обновлении
всех установленных расширений. Разработку этой ситемы
[[http://tromey.com/blog/?p=325][начал]] [[http://www.emacswiki.org/emacs/TomTromey][Том Тромей]] 
в 2007 году, в 2012 она была включена в состав Emacs 24.1, на эти годы
и пришелся пик популярности Emacs Starter Kit, то есть по большому
счету сообщество использовало его для тестирования и разработки
системы пакетов.

Как бы там ни было, личная конфигурация эмакса по своей природе была
есть и будет просто большой кучей несвязанного кода, и лучший способ
справиться с этим --- оставить все как есть; или превратить эту кучу в
руководство которое будет 
[[http://www.literateprogramming.com/knuthweb.pdf][объяснять причины]]
(в первую очередь чтобы не забыть самому) по которым тот или иной
фрагмент находится в этой куче, а потом сделать так чтобы это
руководство само превращало себя в лисп-программу и выполняло
конфигурацию эмакса при запуске. А также, по возможности, пересобирало
само себя при изменении и скачивало новые версии себя из удаленных
источников. Почему бы и нет. Это же руководство для эмакса.

[[elisp:org-babel-tangle][Превратить это руководство в лисп-программу]]
(/сплести/ программу --- /tangle/) очень просто, достаточно
[[https://gitlab.com/zahardzhan/well-tuned-emacs/raw/master/well-tuned-emacs.org][скачать свежую версию этого руководства из гит-репозитория]],
открыть ее в эмаксе и выполнить команду 
[[elisp:org-babel-tangle][M-x org-babel-tangle]].
В результате из фрагментов лисп-кода в этом руководстве будет создана
[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][лисп-программа инициализации эмакса]]_{🔗[[info:Emacs#Init File][info]]🔗[[http://www.emacswiki.org/emacs/InitFile][wiki]]}
[[file:init.el][init.el]]
которую эмакс будет автоматически выполнять при каждом запуске.
В общем виде программа инициализации выглядит так:

#+begin_src emacs-lisp -r -n :tangle init.el :noweb no-export
  <<essential-libraries>>
  <<essential-functions>>
  <<customize-well-tuned-emacs-group>>
  <<customize-well-tuned-emacs-variables>>
  <<customize-customize-and-apply-standard-customizations>>
  <<try-download-this-reference-when-it-is-missing>>
  (if
      <<this-reference-is-in-its-place-and-is-newer-than-user-init-file>>
      <<tangle-this-reference-into-user-init-file-and-then-load-it-again>>
    (progn ; otherwise just continue configuration
      <<initialize-package-system-and-install-user-selected-packages>>
      <<load-packages-and-apply-advanced-non-standard-customizations>>
      ))
  <<bugfixes>>
#+end_src

Перед написанием кода на эмакс лиспе, следует немного обновить сам
язык программирования. Эмакс лисп это древнейший из современных
лиспов, созданный в темный период между возникновением первого лиспа
как концепции теории вычислений, и первыми двумя классическими
дизайнами лиспа: Common Lisp и Scheme; сама концепция лиспа так же
стара для него, как он сам по отношению к современному Common Lisp'у,
а современный Common Lisp в свою очередь --- по отношению к
современной Clojure. Эмакс лисп старомоден, его выразительные средства
скудны, тем не менее, это полноценный лисп и он может с легкостью
дополнить свои возможности основными языковыми средствами Common Lisp,
просто выполнив относительно небольшую встроенную в эмакс
лисп-программу
[[http://www.gnu.org/software/emacs/manual/html_mono/cl.html][GNU Emacs Common Lisp Emulation]].

#+name: essential-libraries
#+begin_src emacs-lisp -r -n :tangle no
  (require 'cl)
#+end_src

Файл инициализации [[file:init.el][init.el]] вторичен по отношению к этому руководству,
это не более чем автоматически сгенерированная из него программа. Но
что если руководства не окажется в директории с настройками эмакса, и
мы не сможем обновить программу инициализации? В таком случае
программа инициализации должна попытаться скачать руководство из
гит-репозитория.

#+name: try-download-this-reference-when-it-is-missing
#+begin_src emacs-lisp -r -n :tangle no
  (unless (file-exists-p well-tuned-emacs-reference-file)
    (condition-case nil
        (with-temp-file well-tuned-emacs-reference-file
          (url-insert-file-contents well-tuned-emacs-reference-url))
      (error
       (message "Failed to download %s from %s." (file-truename well-tuned-emacs-reference-file) well-tuned-emacs-reference-url)
       (when (file-exists-p well-tuned-emacs-reference-file)
         (delete-file well-tuned-emacs-reference-file 'move-to-trash)))))
#+end_src

Прежде мы должны условиться, что это руководство будет храниться в
определенном месте, по умолчанию --- в директории с личными
настройками эмакса (где бы она не находилась по данным эмакса); под
определенным именем, по-умолчанию --- well-tuned-emacs.org. Так же нам
должен быть известен адрес свежей версии этого руководства в
интернете. Для обеспечения переносимости путей файлов между разными
средами исполнения эмакс-лисп кода их следует указывать в формате
[[https://en.wikipedia.org/wiki/Path_(computing)][относительных путей POSIX]], 
это позволит использовать один-и-тот-же файл расположенный в
одном-и-том-же месте одновременно с двух запущенных в разных средах
экземпляров эмакса, к примеру, из Windows-эмакса и из Cygwin-эмакса.

#+name: customize-well-tuned-emacs-variables
#+begin_src emacs-lisp -r -n :tangle no
  (defcustom well-tuned-emacs-reference-file
    (concat (file-name-as-directory user-emacs-directory)
            (file-name-nondirectory "well-tuned-emacs.org"))
    "The Well Tuned Emacs Reference file."
    :type 'file
    :group 'well-tuned-emacs)

  (defcustom well-tuned-emacs-reference-url
    "https://gitlab.com/zahardzhan/well-tuned-emacs/raw/master/well-tuned-emacs.org"
    "The Well Tuned Emacs Reference File on the internet."
    :type 'string
    :group 'well-tuned-emacs)

  (defcustom well-tuned-emacs-compile-user-init-file nil
    "Compile user init file after tangling from Well Tuned Emacs Reference."
    :type 'boolean
    :group 'well-tuned-emacs)
#+end_src

Встроенное в эмакс средство
[[http://www.gnu.org/software/emacs/manual/html_node/elisp/Customization.html#Customization][Customize]]
позволит нам сделать настройки расположения файлов руководства
полностью независимыми от прописанных в этом руководстве значений
по-умолчанию. Потом эти настройки можно будет изменить в самом эмаксе
и сохранить их значения на будущее, не меняя ни фрагменты кода в этом
руководстве, ни код в сгенерированной программе инициализации init.el.

#+name: customize-well-tuned-emacs-group
#+begin_src emacs-lisp -r -n :tangle no
  (defgroup well-tuned-emacs nil
    "Well Tuned Emacs initialization and customization settings."
    :link '(variable-link well-tuned-emacs-reference-file)
    :link '(url-link "https://gitlab.com/zahardzhan/well-tuned-emacs")
    :version "25.0.50.1"
    :group 'initialization)
#+end_src

Лисп-программа [[elisp:customize][M-x customize]], 
ставшая частью эмакса в середине девяностых --- это краеугольный
камень всей системы пользовательских настроек. Само это руководство
строится вокруг этой программы, ради нее оно было
написано. Парадоксально то, что подавляющее большинство фреймворков и
личных настроек отдельных людей, доступных в сети, всеми силами
избегают настройки эмакса с помощью встроенного в эмакс интерфейса
заточенного под его настройку. Люди предпочитают настраивать эмакс
написанием своего лисп-кода в тех случаях, когда этот лисп-код уже
предусмотрительно написан, отлажен и задокументирован разработчиками
лисп-программ, которые пользователь пытается настроить написанием
своего кривого и неотлаженного лисп-кода. Этот чудовищный
[[http://c2.com/cgi/wiki?NotInventedHereSyndrome][фатальный недостаток]]
распространен повсеместно и большинство пользователей эмакса считает
такое положение дел нормальным. Но это не так.

Истина состоит в том, что GNU Emacs 25 имеет 3440 стандартных
настройки в конфигурации по-умолчанию. Все они хорошо организованны,
задокументированны и доступны для поиска и изменения в простом удобном
интерфейсе Customize. Эти настроки сохраняются между сессиями эмакса,
и многие настройки лисп-программ эмакса сами выполнены в виде
специфических лисп-программ. Подключение дополнительных модулей и
пакетов расширений эмакса может запросто увеличить количество таких
настроек до десяти тысяч. К чему приведет попытка изменения нескольких
тысяч параметров управляемых лисп-кодом, меняющимся от
версии-к-версии, написанием своего лисп-кода? Она практически
неизбежно приведет к
[[http://www.emacswiki.org/emacs/DotEmacsBankruptcy][конфигурационному апокалипсису]].
Поэтому здесь и далее, и везде где только можно, я буду использовать
систему Customize.

По-умолчанию Customize хранит свои данные в файле init.el; если мы
переплетем этот файл --- все наши настройки пропадут.  В Customize
можно выполнить настройку самой Customize, но фактически программа не
может изменить место хранения своих данных, при том что такой параметр
в ней есть --- информация о том какой файл будет загружен хранится в
самом этом файле, таким образом эта информация недоступна извне. Мы
будем хранить настройки выполненные программой Customize в файле
custom.el в директории ~/.emacs.d/custom.

#+name: customize-customize-and-apply-standard-customizations
#+begin_src emacs-lisp -r -n :tangle no
  (let ((custom-directory
         (file-name-as-directory (concat user-emacs-directory "custom"))))
    (setq custom-file (concat custom-directory "custom.el"))
    (unless (file-exists-p custom-directory)
      (make-directory custom-directory 'with-parents))
    (when (file-exists-p custom-file)
      (load custom-file)))
#+end_src

Чтобы не /переплетать/ программу инициализации эмакса вручную после
каждого редактирования этого руководства, сделаем так, что программа
будет переплетать сама себя прямо во время запуска эмакса, если
руководство было изменено после изменения программы.

#+name: this-reference-is-in-its-place-and-is-newer-than-user-init-file
#+begin_src emacs-lisp  -r -n :tangle no
  (and (file-exists-p well-tuned-emacs-reference-file)
       (eq well-tuned-emacs-reference-file
           (file-newer-of well-tuned-emacs-reference-file user-init-file)))
#+end_src

#+name: tangle-this-reference-into-user-init-file-and-then-load-it-again
#+begin_src emacs-lisp  -r -n :tangle no
  (progn
    (require 'ob-tangle)
    (message "Tangling %s." well-tuned-emacs-reference-file)
    (org-babel-tangle-file well-tuned-emacs-reference-file
                           user-init-file "emacs-lisp")
    (if well-tuned-emacs-compile-user-init-file
        (progn (byte-compile-file user-init-file 'load)
               (message "Tangled, compiled and loaded %s." user-init-file))
      (progn (load user-init-file)
             (message "Tangled and loaded %s." user-init-file))))
#+end_src

Функция [[(file-newer-of)][file-newer-of]] узнает когда был изменен каждый из файлов, и
возвращает имя того файла, что был изменен позже.

#+name: essential-functions
#+begin_src emacs-lisp  -r -n :tangle no
  (defun file-newer-of (file1 file2) (ref:file-newer-of)
      "Compare last modification time of two files to each other and return FILENAME of newer file."
      (let ((difference
             (float-time
              (time-subtract (file-last-modification-time file1)
                             (file-last-modification-time file2)))))
        (cond ((> difference 0) file1)
              ((< difference 0) file2)
              ((= difference 0) nil))))
#+end_src

Время последнего изменения файла хранится в списке атрибутов файла,
который возвращает встроенная в эмакс функция
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Attributes.html#File-Attributes][file-attributes]].
Для получения этой информации о файле придется написать свою
собственную функцию
[[(file-last-modification-time)][file-last-modification-time]].

#+name: essential-functions
#+begin_src emacs-lisp  -r -n :tangle no
  (defun file-last-modification-time (file) (ref:file-last-modification-time)
    "The time of last access to FILE, as a list of four integers (sec-high sec-low microsec picosec)."
    (sixth (or (file-attributes (file-truename file))
               (file-attributes file))))
#+end_src

Осталось внести последний штрих и общая программа инициализации эмакса
будет готова. Система пакетов эмакса вошла в состав редактора
несколько лет назад, но все еще активно развивается и в некоторых
местах требует ручного вмешательства. Если мы ею воспользуемся,
система пакетов будет автоматически добавлять код своей инициализации
в программу инициализации. Чтобы этого избежать, достаточно добавить
этот код самим, и сразу после этого установить свои любимые пакеты.

#+name: initialize-package-system-and-install-user-selected-packages
#+begin_src emacs-lisp -r -n :tangle no
  (package-initialize)
  <<package-system-backports>>
  (package-install-selected-packages)
#+end_src

В GNU Emacs 25 [[http://endlessparentheses.com/new-in-package-el-in-emacs-25-1-user-selected-packages.html][список имен вручную установленных пакетов]] хранится в
переменной-настройке [[elisp:(customize-apropos "package-selected-packages")][package-selected-packages]], ее можно
кастомизировать и сохранить на будущее, чтобы потом автоматически
устанавливать свои пакеты командой [[elisp:(package-install-selected-packages)][M-x
package-install-selected-packages]]. В GNU Emacs 24 и более ранних
версиях нет ни этой настройки, ни функции автоматической
установки. Добавим их в программу инициализации для совместимости со
старыми версиями.

#+name: package-system-backports
#+begin_src emacs-lisp -r -n :tangle no
  (when (< emacs-major-version 25)
    (defcustom package-selected-packages nil
      "Store here packages installed explicitly by user.
  This variable is fed automatically by Emacs when installing a new
  package in Emacs 25 and higher. You can use it to (re)install
  packages on other machines by running
  `package-install-selected-packages'."
      :type '(repeat symbol)
      :group 'package)

    (defun package-install-selected-packages ()
      "Ensure packages in `package-selected-packages' are installed.
  If some packages are not installed propose to install them."
      (interactive)
      (if (not package-selected-packages)
          (message "‘package-selected-packages’ is empty, nothing to install")
        (progn
          (unless package-archive-contents
            (package-refresh-contents))
          (loop for package in package-selected-packages
                unless (package-installed-p package)
                collect package into packages-to-be-installed
                finally
                (if packages-to-be-installed
                    (when (y-or-n-p
                           (format "%s packages will be installed:\n%s, proceed?"
                                   (length packages-to-be-installed)
                                   (mapconcat #'symbol-name packages-to-be-installed ", ")))
                      (loop for package in packages-to-be-installed do (package-install package)))
                  (message "All your packages are already installed")))))))
#+end_src

На этом описание основной части программы инициализации
завершено. Дальнейший текст рассказывает о важных стандартных
настройках, нестандартных сочетаниях клавиш и конфигурациях
установленных пакетов.

----------------------------------------------------------------------

Идейный преемник проекта [[https://github.com/technomancy/emacs-starter-kit][Emacs Starter Kit]] --- проект [[https://github.com/technomancy/better-defaults][Better Defaults]],
выполнен [[http://technomancy.us/][Филом Хагельбергом]] [[[http://sachachua.com/blog/2014/05/emacs-chat-phil-hagelberg/][интервью]]] в виде пакета с небольшой
лисп-программой. Эта лисп-программа, каждая строка которой тщательно
отобрана сообществом, устанавливает значения пары десятков стандартных
параметров в обход стандартной системы управления этими
параметрами. Трудно найти более противоречивый проект. В некотором
смысле, это образцово-показательный забег по граблям. На мой взгляд,
если современный Starter Kit стал гайдом, то логично было бы сделать
гайдом и Better Defaults. Ниже я привожу ссылки на кастомизации
некоторых ключевых параметров эмакса с пояснением причин по которым их
стоит сделать. Списки сделанных настроек показывают лисп-программы [[elisp:customize-saved][M-x
customize-saved]] и [[elisp:customize-unsaved][M-x customize-unsaved]]. Конечно, система кастомизации
не всемогуща и для некоторых настроек (сочетания клавиш) придется
написать несколько строк кода на лиспе. В общем виде весь последующий
код выглядит так:

#+name: load-packages-and-apply-advanced-non-standard-customizations
#+begin_src elisp -r -n :tangle no
<<functions>>
<<customizations>>
<<keybindings>>
#+end_src

Начнем кастомизацию эмакса сверху и продолжим последовательно
углубляться во всё более тонкие аспекты его работы.

[[elisp:(describe-variable 'frame-title-format)][Frame Title Format]] ← имя буфера или полное имя файла/директории
предваренное именем пользователя и машины при удаленном
подключении. Как ни странно, заголовок фрейма (окна в оконном
менеджере операционной системы) не кастомизируется стандартными
средствами. Если открыто несколько фреймов, заголовок по-умолчанию
совершенно бесполезен, поэтому используем наипростейший формат,
позволяющий отличить один фрейм от другого.

#+name: customizations
#+begin_src elisp -r -n :tangle no
  (setq-default frame-title-format
   '(:eval (concat (when (file-remote-p default-directory)
                     (let ((user (file-remote-p default-directory 'user))
                           (host (file-remote-p default-directory 'host)))
                       (format "%s@%s:" user host)))
                   (or buffer-file-truename dired-directory (buffer-name)))))
#+end_src

# TODO · after buffer name when unsaved changes

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'frames)][Frames]]⊲[[elisp:(customize-variable-other-window 'menu-bar-mode)][Menu Bar Mode]] ← nil. 80% опций главном в меню
эмакса никогда не используются, остальные 20% продублированы в меню
моделайна; меню буферов вызывается по C-Left-Click в любом месте
буфера, меню буфера --- по C-Right-Click, само главное меню ---
клавишей F10. Разумнее всего отключить главное меню и включать его при
необходимости сочетанием C-M-F10.

#+name: keybindings
#+begin_src elisp -r -n :tangle no
(global-set-key (kbd "<C-M-f10>") 'toggle-menu-bar-mode-from-frame)
#+end_src

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'frames)][Frames]]⊲[[elisp:(customize-variable-other-window 'tool-bar-mode)][Tool Bar Mode]]  ← nil. Тулбар в эмаксе
абсолютно бесполезен.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'frames)][Frames]]⊲[[elisp:(customize-variable-other-window 'scroll-bar-mode)][Scroll Bar Mode]] ← right. Многие отключают
полосу прокрутки по трем причинам: она не является частью стандартного
интерфейса эмакса, она плохо реализована и эстетически убога. Но в то
же время, нельзя отрицать ее очевидную пользу в графических средах
даже в таком неполноценном виде.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'frames)][Frames]]⊲[[elisp:(customize-group-other-window 'window-divider)][Window Divider]]⊲[[elisp:(customize-variable-other-window 'window-divider-mode)][Window Divider Mode]] ←
nil. Визуальное разделение окон полосой позволяет менять размеры окон
мышкой. Полезная опция при включенных полосах прокрутки. Выглядит
старомодно, но в группе есть настройки стиля.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'frames)][Frames]]⊲[[elisp:(customize-face-other-window 'fringe)][Fringe face]] ← (t nil). Во всех текстовых
редакторах (начиная с блокнота) принято иметь небольшие поля по краям
области редактирования текста. Поля обязательно должны быть цвета фона
чтобы не акцентировать внимание на артефактах рендеринга при
включенной полосе прокрутки.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'frames)][Frames]]⊲[[elisp:(customize-variable-other-window 'indicate-empty-lines)][Indicate Empty Lines]] ← nil. Штриховка на
полях изящно выделяет пустую область за гранью буфера, но иногда
отвлекает.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'initialization)][Initialization]]⊲[[elisp:(customize-variable-other-window 'initial-buffer-choice)][Initial Buffer Choice]] ←
remember-notes. Вместо напыщенного стартового экрана эмакс открывает
заметки, буфер =*​scratch​*=, файл, директорию или все что угодно, на
выбор.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'data)][Data]]⊲[[elisp:(customize-group-other-window 'remember)][Remember]]⊲[[elisp:(customize-variable-other-window 'remember-notes-initial-major-mode)][Remember Notes Initial Major Mode]] ←
initial-major-mode. Режим редактирования заметок. По-умолчанию
предполагается, что это заметки с лисп-кодом для эмакса, но можно 
[[elisp:(describe-function
 'customize-save-variable)][заменить на варианты]] вроде [[elisp:(customize-save-variable%20'remember-notes-initial-major-mode%20'text-mode)][text-mode]], [[elisp:(customize-save-variable%20'remember-notes-initial-major-mode%20'fundamental-mode)][fundamental-mode]], [[elisp:(customize-save-variable%20'remember-notes-initial-major-mode%20'org-mode)][org-mode]], или
что-угодно еще. В группе кастомизации [[elisp:(customize-group 'remember 'other-window)][Remember]] можно указать 
[[elisp:(customize-variable-other-window 'remember-data-file)][расположение файла с заметками]], например ~/Dropbox/Заметки, и много
других вещей.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'initialization)][Initialization]]⊲[[elisp:(customize-variable-other-window%20'initial-scratch-message)][Initial Scratch Message]] ←
bla-bla-bla. Эмакс [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html][всегда]] открывает =*scratch*=-буфер после запуска.
От него невозможно избавиться, но можно сделать [[http://ergoemacs.org/emacs/modernization_scratch_buffer.html][более полезным]], если
добавить в него несколько [[elisp:(describe-function 'fancy-splash-insert)][напыщенных]] ссылок на домашнюю директорию,
зашифрованный эмаксом файл с личными паролями, активные проекты, сайты
и прочее.

#+name: customizations
#+begin_src elisp -r -n :tangle no
  (add-hook 'emacs-startup-hook
            '(lambda ()
               (with-current-buffer "*scratch*"
                 (save-excursion
                   (goto-char (1- (point-max)))
                   (let ((initial-scratch-message-end-point (point)))
                     (fancy-splash-insert
                      "To start: "
                      :link `("open file"
                              ,(lambda (_button) (call-interactively 'find-file))
                              "Specify a new file's name, to edit the file")
                      ", "
                      :link `("open home directory"
                              ,(lambda (_button) (dired "~"))
                              "Open your home directory, to operate on its files")
                      " or "
                      :link `("open password vault"
                              ,(lambda (_button) (ignore-errors (find-file "~/Dropbox/Passwords.org.gpg")))
                              "Open your encrypted file with passwords.")
                      ".")
                     (comment-region initial-scratch-message-end-point (point)))
                   (when (buffer-modified-p)
                     (set-buffer-modified-p nil))))))
#+end_src

установка рабочей директории


--------------------------------------------------------------------------------

отключение звоночка



(customize-face-other-window 'default) ← руками не трогать.

Кастомизация шрифтов в эмаксе чрезвычайно специфична и
системно-зависима. Это одно из немногих исключений из правил, когда
проще написать свой велосипед, чем использовать стандартные средства.

[[https://en.wikipedia.org/wiki/Cambria_(typeface)][Cambria]]-11 очень хороша в Windows 10. Как писал создатель языка C++:
«В коде программ [на C++] в этой книге [«Язык программирования C++»]
используется пропорциональный шрифт [полужирный италик с
засечками]. На первый взгляд такое написание кажется неестественным
для программистов, привыкших видеть шрифт с буквами одинаковой
ширины. Однако пропорциональный шрифт легче и лучше воспринимается,
чем моноширинный. Использование пропорционального шрифта также
позволяет избежать многих неестественных разрывов строк в коде. Более
того, мои эксперименты показали. что большинство людей через некоторое
время считают новый стиль более читабельным».

[[https://en.wikipedia.org/wiki/Consolas][Consolas]]-10 --- моноширинный шрифт по-умолчанию в Windows 10.

[[https://en.wikipedia.org/wiki/Courier_(typeface)#Courier_New][Courier New]]-9 --- классика жанра.

[[https://en.wikipedia.org/wiki/Monaco_(typeface)][Monaco]]-?? ---моноширинный шрифт по-умолчанию в ранних версиях Mac OS X.

[[https://en.wikipedia.org/wiki/Menlo_(typeface)][Menlo]]-?? --- моноширинный шрифт по-умолчанию в современных версиях Mac OS X.

[[http://www.marksimonson.com/fonts/view/anonymous-pro][Anonymous Pro]]-11, [[https://damieng.com/blog/2008/05/26/envy-code-r-preview-7-coding-font-released][Envy Code R]]-10 и другие --- модные моноширинные
шрифты для программирования.

Indent Tabs Mode

--------------------------------------------------------------------------------

[[elisp:(customize-group-other-window Режим"emacs" 'other-windows)][Emacs]]⊲[[elisp:(customize-group "i18n" 'other-window)][I18n]]⊲[[elisp:(customize-group "mule" 'other-window)][MULE Internationalization]]⊲[[elisp:(customize-variable-other-window 'default-input-method)][Default Input Method]] ←
russian-computer. Эмакс использует независимое от операционной системы
переключение языков и методов ввода для обеспечения своей работы в
очень разных средах. Переключение на русский язык по C-\ без
предварительного указания метода ввода требует кастомизации.

----------------------------------------------------------------------

Сочетания клавиш в эмаксе имеют три ярко выраженных особенности: их
/очень/ много; их трудно запомнить; и они вызывают повреждения рук при
злоупотреблении. Для снижения нагрузки на левую руку при вводе команд
эмакса многие люди [[http://www.emacswiki.org/emacs/MovingTheCtrlKey][советуют поменять местами клавиши Caps Lock и
Control]]. Раньше я так и делал, но опыт показал, что этого
недостаточно. На современных стандартных клавиатурах кнопку Caps Lock
нажимать удобнее, чем Control, но это не избавляет от нагрузки на
левую руку, а всего лишь незначительно снижает ее. До сих пор, лучшее
решение к которому я пришел --- полностью отказаться от клавиш Control
и Caps Lock и использовать в качестве модификатора «C-» зажатую
клавишу «пробел». Решение не идеальное, но для здоровья рук оно
полезнее, чем caps ⇆ ctrl.

Сочетание клавиш C-w --- де-факто стандарт для удаления слова слева от
курсора.

#+name: functions
#+begin_src elisp -r -n :tangle no
  (defun backward-kill-word-or-kill-region (arg)
    (interactive "p")
    (if (region-active-p)
        (kill-region (region-beginning) 
                     (region-end))
      (backward-kill-word arg)))
#+end_src

#+name: keybindings
#+begin_src elisp -r -n :tangle no
  (global-set-key (kbd "C-w") 'backward-kill-word-or-kill-region)
  (define-key minibuffer-local-map (kbd "C-w") 'backward-kill-word-or-kill-region)
  (add-hook 'ido-setup-hook 
            (lambda ()
              (define-key ido-completion-map (kbd "C-w") 'ido-delete-backward-word-updir)))
#+end_src

----------------------------------------------------------------------

Следует быть осторожным при указании относительных путей: [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Windows-HOME.html][в Windows
Vista/7/8/10]] эмакс считает своей домашней директорией ~ значение
переменной окружения (getenv "AppData")→C:\Users\User\AppData\Roaming,
в то время как в UNIX-совместимых ОС подразумевается директория
(getenv "UserProfile")→C:\Users\User. Чтобы избежать неоднозначности
нужно установить значение переменной окружения HOME в Windows.

#+begin_src emacs-lisp -r -n :tangle no
  (when (eq system-type 'windows-nt)
    (setenv "Home" (getenv "UserProfile")))
 #+end_src

----------------------------------------------------------------------

Исправления некоторых багов GNU Emacs:

- [[http://wenshanren.org/?p=781][Emacs 25 testing: org-html-export returns org-html-fontify-code: Wrong number of arguments…]]

  #+name: bugfixes
  #+begin_src emacs-lisp -r -n :tangle no
    (defun org-font-lock-ensure ()
      (font-lock-fontify-buffer))
  #+end_src

----------------------------------------------------------------------

Copyright © 2010-2015 Роман Захаров [[mailto:zahardzhan@gmail.com][zahardzhan@gmail.com]].

[[https://gitlab.com/zahardzhan/well-tuned-emacs][Проект на Gitlab]] начат 1 ноября 2015.

Эта программа не является частью GNU Emacs.

Это программа является свободным программным обеспечением. Вы можете
распространять и/или модифицировать её согласно условиям
[[http://www.gnu.org/licenses/gpl-3.0.txt][Стандартной Общественной Лицензии GNU]],
опубликованной Фондом Свободного Программного Обеспечения, версии 3
или, по Вашему желанию, любой более поздней версии.

Эта программа распространяется в надежде, что она будет полезной, но
БЕЗ ВСЯКИХ ГАРАНТИЙ, в том числе подразумеваемых гарантий ТОВАРНОГО
СОСТОЯНИЯ ПРИ ПРОДАЖЕ и ГОДНОСТИ ДЛЯ ОПРЕДЕЛЁННОГО
ПРИМЕНЕНИЯ. Смотрите Стандартную Общественную Лицензию GNU для
получения дополнительной информации.

Вы должны были получить копию Стандартной Общественной Лицензии GNU
вместе с программой. В случае её отсутствия, посмотрите
[[http://www.gnu.org/licenses/][Лицензии на сайте GNU]].
