#+Title: Well Tuned Emacs
#+Author: Роман Захаров
#+Email: zahardzhan@gmail.com

#+Options: HTML-Postamble:nil # HTML-страница без футера
#+Options: ToC:nil # Оглавление
#+Options: Org-Display-Internal-Link-With-Indirect-Buffer:t # Внутренние ссылки из этого документа открываются в другом буфере
#+Options: ^:t # TeX-like syntax for sub/superscripts ^:{} and a_{b}
# +Style: <link rel="stylesheet" type="text/css" href="well-tuned-emacs.css"/>

Emacs [“Editor MACroS”, /​/ˈeditər ˈmakrōs/​/ → /​/ˈemaks/​/, далее ---
«эмакс»] был создан давным давно в Лаборатории Искуственного
Интеллекта MIT [[[https://en.wikipedia.org/wiki/MIT_Computer_Science_and_Artificial_Intelligence_Laboratory][AI Lab]]]. Эмакс это текстовый редактор поведение и
возможности которого изменяются прямо во время написания в нем текста
на языке программирования на котором написан сам эмакс. Более того,
прямо во время написания в эмаксе текста на языке программирования на
котором написан сам эмакс изменяется поведение и возможности самого
языка программирования на котором написан эмакс. Все это делает эмакс
самым гибким и универсальным текстовым редактором в сравнении с любым
другим.

Эмакс развивается уже несколько десятилетий. Каждый год сотни человек
добавляют в него все новые и новые возможности. Обычно это небольшие
фрагменты обособленной функциональности под нужды конкретного
пользователя. Однако, общий объем и широта охвата этих улучшений со
временем превратили мощный текстовый редактор во всеобъемлющую
кроссплатформенную программную среду в которой можно делать абсолютно
все что угодно, если это хотя бы немного относится к работе с текстом.

Универсальность эмакса играет вам на руку, если вы понимаете как он
устроен: вы можете делать тысячу разных дел через единый интерфейс в
котором все состоит из текста во всех его проявлениях. Возможно, это
выглядит архаично с точки зрения представлений о современном
пользовательском интерфейсе, но это не так; хотя бы потому что
современные интерфейсы не раскрывают силу простого текста в полной
мере. Чтобы стать грамотным пользователем эмакса, вам придется понять
его концепцию и внутреннее устройство, а это значит --- приобщиться к
культуре лисп-хакеров 70-х годов прошлого века. Новичков такое
положение дел пугает, но все не так плохо: эмакс сложен только для не
простых задач, а для простых задач он не сложен, все зависит только от
ваших потребностей. Начать знакомство с ним лучше всего с общего
обзора “[[http://www.gnu.org/software/emacs/tour/][A Guided Tour of Emacs]]” на сайте проекта [[http://www.gnu.org/philosophy/free-sw.ru.html][свободной]]
[[http://www.gnu.org][операционной системы GNU]].

Ричард Столлман описывает историю возникновения эмакса в статье «[[http://www.gnu.org/gnu/rms-lisp.ru.html][Мой
опыт работы с лиспом и развитие GNU Emacs]]»; эта история тесно связана
с не менее интересной [[http://www.gnu.org/gnu/thegnuproject.ru.html][историей проекта GNU]] из которой можно узнать,
что [[https://www.gnu.org/software/emacs/][GNU Emacs]] был первой программой проекта GNU. Подробно суть того
что из себя представляет эмакс изложена в документе “[[https://www.gnu.org/software/emacs/emacs-paper.html][EMACS: The
Extensible, Customizable Display Editor]]” написанном в 1981 году --- и
за прошедшие годы эта суть ничуть не изменилась.
                                        
Расширяемость эмакса это одновременно его благословение и
проклятье. Конечно, в стандартной поставке эмакс хорош, но не так
хорош как мог бы быть. Вы не ограничены решениями разработчиков, и
если вам нужна функциональность которой в эмаксе нет, вы можете
добавить ее сами: достаточно просто открыть эмакс и подробно её
описать. В конце концов все возможности эмакса по редактированию
текста это всего лишь текст описывающий что делать с текстом, и вы
можете изменить этот текст в любое время точно так же как и любой
другой, тем самым изменив возможности эмакса. Потенциально он обладает
безграничными возможностями, но чтобы ими воспользоваться придется
взяться за настройку, а это подразумевает умение программировать и
плотное общение с сообществом.

Настройка эмакса это своего рода декоративно-прикладное искусство; для
каждого конкретного пользователя она заключается в составлении
лисп-программы из фрагментов лисп-кода взятых из множества
разрозненных источников. Никакого другого способа в принципе нет, и
перед погружением в эту тему следует освоиться с программированием
вообще и программированием на лиспе в частности.

В изучении программирования поможет книга «[[http://newstar.rinet.ru/~goga/sicp/sicp-ru-screen.pdf][Структура и интерпретация
компьютерных программ]]» --- это вводный курс по информатике в MIT. В
деле написания программ для эмакса пригодится учебник «[[http://alexott.net/ru/emacs/elisp-intro/elisp-intro-ru.html][Введение в
программирование на Emacs Lisp]]» и справочник “[[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html][GNU Emacs Lisp Reference
Manual]]”.

Эмакс совершенно точно не та программа за изучение которой стоит
браться только ради того, чтобы редактировать в нем текст. Его следует
воспринимать скорее как живой артефакт и культурный памятник более
цивилизованной эпохи. Изучение эмакса окажется пустой тратой времени
если вы не программируете и не хотите иметь ничего общего с этой
областью деятельности, но если это не так, ничего лучше эмакса вы не
найдете.

Обычно создание удобной для себя конфигурации и ее последующая доводка
растягивается на долгое время. Можно облегчить себе жизнь и установить
фреймворк в котором все основные настройки выполнены в соответствии с
видением автора фреймворка, и вам даже не придется править исходный
код для того чтобы просто пользоваться эмаксом в свое
удовольствие. Самые популярные фреймворки на сегодня: [[https://github.com/syl20bnr/spacemacs][Spacemacs]], [[https://github.com/bbatsov/prelude][Emacs
Prelude]], [[https://github.com/eschulte/emacs24-starter-kit][Eschulte Literate Emacs Starter Kit]], [[https://github.com/overtone/emacs-live][Overtone Emacs Live]],
[[https://github.com/purcell/emacs.d][Purcell emacs.d]], [[https://github.com/xiaohanyu/oh-my-emacs][Oh My Emacs]].

Все будет хорошо до тех пор пока вы не захотите встроить в эмакс некую
невероятную функциональность которой в выбранном фреймворке нет, и
тогда вам придется вручную интегрировать некий код не только в эмакс,
но и во фреймворк, а для этого нужно будет разобраться с его
внутренним устройством, что сводит все его достоинства на нет. К
такому выводу пришел автор [[https://github.com/technomancy/emacs-starter-kit][Emacs Starter Kit]] (см. [[http://www.google.com/search?q=meet+emacs+pluralsight+torrent][Meet Emacs]]), когда
закрыл свой проект после шести лет развития:

#+BEGIN_QUOTE
Старые версии Emacs Starter Kit были единой-для-всех кодовой базой
заменяющей содержимое директории ~/.emacs.d. Это было очень популярное
решение, но большая связка бессвязной функциональности вела к тому,
что пользователь просто привыкал к ней ничего не понимая. Когда
некоторые вещи ломались или вели себя не так как вам хотелось, вы и
понятия не имели где их исправить.

Я понял, что пользователям лучше подходят маленькие /пакеты/ дающие
желаемую функциональность. Вместо свалки кода, Emacs Starter Kit
сделался небольшим руководством. Как пользователю Emacs, вам предстоит
искать новые фрагменты эмакс-лисп-кода, интегрировать их,
конфигурировать, и даже писать свои собственные. Emacs Starter Kit
поможет вам советами где начать и что именно искать, но сборка годной
конфигурации это личное дело каждого.
#+END_QUOTE

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html][Система пакетов]][[[info:Emacs#Packages][инфо]]] эмакса это встроенная в него [[elisp:list-packages][лисп-программа]]
которая автоматически устанавливает из интернета другие
лисп-программы, расширяющие возможности эмакса. Система пакетов
работает независимо от операционной системы под которой запущен
редактор, она сама отслеживает зависимости между лисп-программами и
заботится об их обновлении. Разработку этой ситемы [[http://tromey.com/blog/?p=325][начал]] [[http://www.emacswiki.org/emacs/TomTromey][Том Тромей]] в
2007 году, в 2012 она была включена в состав Emacs 24.1; пик
популярности Emacs Starter Kit пришелся именно на эти годы, то есть по
большому счету сообщество [[http://technomancy.us/153][использовало]] его для разработки системы
пакетов.

Как бы там ни было, личная конфигурация эмакса по своей природе была
есть и будет просто большой кучей бессвязаного кода, и лучший способ
справиться с этим --- оставить все как есть; или превратить эту кучу в
руководство которое будет [[http://www.literateprogramming.com/knuthweb.pdf][объяснять причины]] (в первую очередь чтобы не
забыть самому) по которым тот или иной фрагмент находится в этой куче,
а потом сделать так чтобы это руководство само превращало себя в
лисп-программу и выполняло конфигурацию эмакса при запуске. А также,
пересобирало само себя при изменении и скачивало новые версии себя из
удаленных источников. Почему бы и нет. Это же руководство для эмакса.

[[elisp:org-babel-tangle][Превратить это руководство в лисп-программу]] (/сплести/ программу ---
/tangle/) очень просто, достаточно [[https://gitlab.com/zahardzhan/well-tuned-emacs/raw/master/well-tuned-emacs.org][скачать свежую версию этого
руководства]], открыть ее в эмаксе и выполнить команду [[elisp:org-babel-tangle][M-x
org-babel-tangle]].  В результате из фрагментов лисп-кода в этом
руководстве будет создана [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][лисп-программа инициализации
эмакса]][[[info:Emacs#Init%0A%20File][инфо]]|[[http://www.emacswiki.org/emacs/InitFile][вики]]] [[file:init.el][init.el]] которую эмакс будет автоматически выполнять
при каждом запуске.  В общем виде программа инициализации выглядит
так:

#+begin_src emacs-lisp -r -n :tangle init.el :noweb no-export
  <<essential-libraries>>
  <<essential-functions>>
  <<customize-this-reference>>
  <<customize-customize-and-apply-customizations>>
  <<try-to-download-this-reference-when-it-is-missing>>
  (if
      <<this-reference-is-in-its-place-and-is-newer-than-user-init-file>>
      <<tangle-this-reference-into-user-init-file-and-then-load-it-again>>
    (progn
      <<initialize-package-system-and-install-user-selected-packages>>
      <<load-packages-and-apply-advanced-customizations>>
      ))
  <<fix-some-bugs>>
#+end_src

Перед написанием кода на эмакс лиспе, следует немного обновить сам
язык программирования. Эмакс лисп это древнейший из современных
лиспов, созданный в темный период между возникновением первого лиспа
как концепции теории вычислений, и первыми двумя классическими
дизайнами лиспа: Common Lisp и Scheme; сама концепция лиспа так же
стара для него, как он сам по отношению к современному Common Lisp'у,
а современный Common Lisp в свою очередь --- по отношению к
современной Clojure. Эмакс лисп старомоден, его выразительные средства
скудны, тем не менее, это полноценный лисп и он может с легкостью
дополнить свои возможности основными языковыми средствами Common Lisp,
просто выполнив относительно небольшую встроенную в эмакс
лисп-программу [[http://www.gnu.org/software/emacs/manual/html_mono/cl.html][GNU Emacs Common Lisp Emulation]][[[info:cl#Top][инфо]]].

#+name: essential-libraries
#+begin_src emacs-lisp -r -n :tangle no
  (require 'cl)
#+end_src

Файл инициализации [[file:init.el][init.el]] вторичен по отношению к этому руководству,
это не более чем автоматически сгенерированная из него программа. Но
что если руководства не окажется в директории с настройками эмакса, и
мы не сможем регенерировать программу инициализации? В таком случае
программа инициализации должна попытаться скачать руководство из
интернета.

#+name: try-to-download-this-reference-when-it-is-missing
#+begin_src emacs-lisp -r -n :tangle no
  (unless (file-exists-p well-tuned-emacs-reference-file)
    (condition-case nil
        (progn
          (message "Trying to download %s and save it as %s." well-tuned-emacs-reference-url
                   (file-truename well-tuned-emacs-reference-file))
          (with-temp-file well-tuned-emacs-reference-file
            (url-insert-file-contents well-tuned-emacs-reference-url)))
      (error
       (message "Failed to download %s and save it as %s." well-tuned-emacs-reference-url
                (file-truename well-tuned-emacs-reference-file))
       (when (file-exists-p well-tuned-emacs-reference-file)
         (delete-file well-tuned-emacs-reference-file 'move-to-trash)))))
#+end_src

Прежде мы должны условиться, что это руководство будет храниться в
определенном месте, по умолчанию --- в [[elisp:(dired user-emacs-directory)][директории с пользовательскими
пользовательскими настройками эмакса]]; под определенным именем,
по-умолчанию --- [[elisp:(find-file (concat (file-name-as-directory user-emacs-directory) "well-tuned-emacs.org"))][well-tuned-emacs.org]]. Так же нам должен быть известен
адрес свежей версии этого руководства в интернете. Встроенное в эмакс
средство [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Customization.html#Customization][Customize]] позволит нам сделать настройки расположения файлов
руководства полностью независимыми от прописанных в этом руководстве
значений по-умолчанию. Потом эти настройки можно будет изменить в
самом эмаксе и сохранить их значения на будущее, не меняя ни фрагменты
кода в этом руководстве, ни код в сгенерированной программе
инициализации init.el. Для этого создадим в группе кастомизации
пользовательских опций [[elisp:(customize-group-other-window 'initialization)][Initialization]] подгруппу [[elisp:(customize-group-other-window 'well-tuned-emacs)][Well Tuned Emacs]].

#+name: customize-this-reference
#+begin_src emacs-lisp -r -n :tangle no
  (defgroup well-tuned-emacs nil
    "Well Tuned Emacs initialization and customization settings."
    :link '(url-link "https://gitlab.com/zahardzhan/well-tuned-emacs")
    :version "25.0.50.1"
    :group 'initialization)
#+end_src

И добавим в эту группу три пользовательские опции.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'initialization)][Initialization]]⊲[[elisp:(customize-group-other-window 'well-tuned-emacs)][Well Tuned Emacs]]⊲[[elisp:(customize-variable-other-window%20'well-tuned-emacs-reference-file)][Reference File]] ←
~/.emacs.d/well-tuned-emacs.org. Расположение файла этого
руководства. Для обеспечения переносимости путей файлов между разными
средами исполнения эмакс-лисп кода их следует указывать в формате
[[https://en.wikipedia.org/wiki/Path_(computing)][POSIX]], это позволит использовать один-и-тот-же файл одновременно с
двух запущенных в разных средах экземпляров эмакса (например
Windows/Cygwin).

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'initialization)][Initialization]]⊲[[elisp:(customize-group-other-window 'well-tuned-emacs)][Well Tuned Emacs]]⊲[[elisp:(customize-variable-other-window%20'well-tuned-emacs-reference-file)][Reference URL]] ←
https://gitlab.com/zahardzhan/well-tuned-emacs/raw/master/well-tuned-emacs.org.
Адрес свежей версии этого руководства в интернете.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'initialization)][Initialization]]⊲[[elisp:(customize-group-other-window 'well-tuned-emacs)][Well Tuned Emacs]]⊲[[elisp:(customize-variable-other-window%20'well-tuned-emacs-reference-file)][Compile User Init
File]] ← nil.  Указание компилировать лисп-программу инициализации
эмакса перед загрузкой.

#+name: customize-this-reference
#+begin_src emacs-lisp -r -n :tangle no
  (defcustom well-tuned-emacs-reference-file
    (concat (file-name-as-directory user-emacs-directory)
            (file-name-nondirectory "well-tuned-emacs.org"))
    "The Well Tuned Emacs Reference file."
    :type 'file
    :group 'well-tuned-emacs)

  (defcustom well-tuned-emacs-reference-url
    "https://gitlab.com/zahardzhan/well-tuned-emacs/raw/master/well-tuned-emacs.org"
    "The Well Tuned Emacs Reference File on the internet."
    :type 'string
    :group 'well-tuned-emacs)

  (defcustom well-tuned-emacs-compile-user-init-file nil
    "Compile user init file after tangling from Well Tuned Emacs Reference."
    :type 'boolean
    :group 'well-tuned-emacs)
#+end_src

Лисп-программа [[elisp:customize][M-x customize]], ставшая частью эмакса в середине
девяностых --- это краеугольный камень всей системы пользовательских
настроек. Парадоксально, но подавляющее большинство фреймворков и
личных настроек, доступных в сети, всеми силами избегают настройки
эмакса с помощью встроенного в него интерфейса предназначенного именно
для этой цели. Люди предпочитают настраивать эмакс написанием своего
лисп-кода в тех случаях, когда этот лисп-код уже предусмотрительно
написан, отлажен и задокументирован разработчиками лисп-программ,
которые пользователь пытается настроить. Этот [[http://c2.com/cgi/wiki?NotInventedHereSyndrome][фатальный недостаток]]
распространен повсеместно и большинство пользователей эмакса считает
такое положение дел нормальным.

Истина состоит в том, что GNU Emacs 25 имеет 3440 стандартных
настройки в конфигурации по-умолчанию. Все они хорошо организованны,
задокументированны и доступны для поиска и изменения в простом удобном
и непривычном псевдографическом интерфейсе. Эти настроки сохраняются
между сессиями эмакса, и многие из них выполнены в виде специфических
лисп-программ. Подключение дополнительных модулей и пакетов расширений
эмакса может запросто увеличить количество таких настроек до десяти
тысяч. К чему приведет попытка изменения нескольких тысяч параметров
управляемых лисп-кодом, меняющимся от версии-к-версии, написанием
своего лисп-кода? Она практически неизбежно приведет к
[[http://www.emacswiki.org/emacs/DotEmacsBankruptcy][конфигурационному апокалипсису]].  Поэтому здесь и далее, и везде где
только можно, я буду использовать систему Customize.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window%20'help)][Help]]⊲[[elisp:(customize-group-other-window%20'customize)][Customize]]⊲[[elisp:(customize-variable-other-window 'custom-file)][Custom File]] ←
~/.emacs.d/custom/custom.el. По-умолчанию Customize хранит свои данные
в файле init.el; если мы переплетем этот файл --- все наши настройки
пропадут.  В Customize можно выполнить настройку самой Customize, но
фактически эта программа не может изменить место хранения своих
данных, при том что такой параметр в ней есть --- информация о том
какой файл будет загружен хранится в самом этом файле, таким образом
эта информация недоступна извне. Мы будем хранить настройки
выполненные программой Customize в файле custom.el в директории
~/.emacs.d/custom.

#+name: customize-customize-and-apply-customizations
#+begin_src emacs-lisp -r -n :tangle no
  (let ((custom-directory
         (file-name-as-directory (concat user-emacs-directory "custom"))))
    (setq custom-file (concat custom-directory "custom.el"))
    (unless (file-exists-p custom-directory)
      (make-directory custom-directory 'with-parents))
    (when (file-exists-p custom-file)
      (load custom-file)))
#+end_src

Чтобы не /переплетать/ программу инициализации эмакса вручную после
каждого редактирования этого руководства, сделаем так, что программа
будет переплетать сама себя прямо во время запуска эмакса, если
руководство было изменено после изменения программы.

#+name: this-reference-is-in-its-place-and-is-newer-than-user-init-file
#+begin_src emacs-lisp  -r -n :tangle no
  (and (file-exists-p well-tuned-emacs-reference-file)
       (eq (file-last-modified-of well-tuned-emacs-reference-file user-init-file)
           well-tuned-emacs-reference-file))
#+end_src

#+name: tangle-this-reference-into-user-init-file-and-then-load-it-again
#+begin_src emacs-lisp  -r -n :tangle no
  (progn
    (require 'ob-tangle)
    (message "Tangling %s → %s." well-tuned-emacs-reference-file user-init-file)
    (org-babel-tangle-file well-tuned-emacs-reference-file
                           user-init-file "emacs-lisp")
    (if well-tuned-emacs-compile-user-init-file
        (progn (byte-compile-file user-init-file 'load)
               (message "Tangled, compiled and loaded %s." user-init-file))
      (progn (load user-init-file)
             (message "Tangled and loaded %s." user-init-file))))
#+end_src

Функция [[(file-last-modified-of)][file-last-modified-of]] узнает когда был изменен каждый из файлов, и
возвращает имя того файла, что был изменен позже.

#+name: essential-functions
#+begin_src emacs-lisp  -r -n :tangle no
  (defun file-last-modified-of (file1 file2) ; (ref:file-last-modified-of)
    "Compare last modification time of files to each other and return newer FILE."
    (let ((difference
           (float-time
            (time-subtract (file-last-modification-time file1)
                           (file-last-modification-time file2)))))
      (or (when (plusp difference) file1)
          (when (minusp difference) file2))))
#+end_src

Функция [[(file-last-modification-time)][file-last-modification-time]] извлекает время последнего
изменения файла из списка атрибутов, который возвращает встроенная в
эмакс функция [[https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Attributes.html#File-Attributes][file-attributes]].

#+name: essential-functions
#+begin_src emacs-lisp  -r -n :tangle no
  (defun file-last-modification-time (file) ; (ref:file-last-modification-time)
    "The time of last access to FILE, as a list of four integers (sec-high sec-low microsec picosec)."
    (sixth (or (file-attributes (file-truename file))
               (file-attributes file))))
#+end_src

Осталось нанести последний штрих и общая программа инициализации
эмакса будет готова. Система пакетов вошла в состав эмакса несколько
лет назад, но все еще активно развивается и в некоторых местах требует
ручного вмешательства. Если мы ею воспользуемся, система пакетов
добавит код своей инициализации в сгенерированную программу
инициализации эмакса. Чтобы этого избежать, достаточно добавить этот
код самим, и сразу после этого [[elisp:(package-list-packages)][установить свои любимые пакеты]].

#+name: initialize-package-system-and-install-user-selected-packages
#+begin_src emacs-lisp -r -n :tangle no
  (package-initialize)
  <<package-system-backports>>
  (unless (every 'package-installed-p package-selected-packages)
    (package-refresh-contents)
    (ignore-errors ; or maybe don't
      (package-install-selected-packages)))
#+end_src

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window%20'applications)][Applications]]⊲[[elisp:(customize-group-other-window%20'package)][Package]]⊲[[elisp:(customize-variable-other-window%20'package-archives)][Archives]] ← адреса архивов. По-умолчанию
эмакс устанавливает пакеты из официального архива [[http://elpa.gnu.org/][GNU ELPA]], в нем мало
пакетов, но все они качественные и доверенные. Больше пакетов в
неофициальных архивах [[https://melpa.org][MELPA]] и [[https://marmalade-repo.org/][Marmalade]].

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window%20'applications)][Applications]]⊲[[elisp:(customize-group-other-window%20'package)][Package]]⊲[[elisp:(customize-variable-other-window%20'package-selected-packages)][Selected Packages]] ← список вручную
установленных пакетов как пользовательская опция системы пакетов, а
также функция их автоматической установки [[http://endlessparentheses.com/new-in-package-el-in-emacs-25-1-user-selected-packages.html][появились в GNU Emacs 25]].
GNU Emacs 24 и более ранних версиях нет ни этой настройки, ни функции
автоматической установки. Добавим их в программу инициализации для
совместимости со старыми версиями.

#+name: package-system-backports
#+begin_src emacs-lisp -r -n :tangle no
  (when (< emacs-major-version 25)
    (defcustom package-selected-packages nil
      "Store here packages installed explicitly by user.
  This variable is fed automatically by Emacs when installing a new
  package in Emacs 25 and higher. You can use it to (re)install
  packages on other machines by running
  `package-install-selected-packages'."
      :type '(repeat symbol)
      :group 'package)

    (defun package-install-selected-packages ()
      "Ensure packages in `package-selected-packages' are installed.
  If some packages are not installed propose to install them."
      (interactive)
      (if (not package-selected-packages)
          (message "‘package-selected-packages’ is empty, nothing to install")
        (loop for package in package-selected-packages
              unless (package-installed-p package)
              collect package into packages-to-be-installed
              finally
              (if packages-to-be-installed
                  (when (y-or-n-p
                         (format "%s packages will be installed:\n%s, proceed?"
                                 (length packages-to-be-installed)
                                 (mapconcat #'symbol-name packages-to-be-installed ", ")))
                    (loop for package in packages-to-be-installed do (package-install package)))
                (message "All your packages are already installed"))))))
#+end_src

На этом описание основной части программы инициализации
завершено. Дальнейший текст рассказывает о важных стандартных
настройках, нестандартных сочетаниях клавиш и конфигурации
установленных пакетов.

----------------------------------------------------------------------

Идейный преемник проекта [[https://github.com/technomancy/emacs-starter-kit][Emacs Starter Kit]] --- проект [[https://github.com/technomancy/better-defaults][Better Defaults]],
выполнен [[http://technomancy.us/][Филом Хагельбергом]] [[[http://sachachua.com/blog/2014/05/emacs-chat-phil-hagelberg/][интервью]]] в виде пакета с небольшой
лисп-программой. Эта лисп-программа, каждая строка которой тщательно
отобрана сообществом, устанавливает значения пары десятков стандартных
параметров в обход стандартной системы управления этими
параметрами. Трудно найти более противоречивый проект. В некотором
смысле, это образцово-показательный забег по граблям. На мой взгляд,
если современный Starter Kit стал гайдом, то логично было бы сделать
гайдом и Better Defaults. Ниже я привожу ссылки на кастомизации
некоторых ключевых параметров эмакса с пояснением причин по которым их
стоит сделать. Списки сделанных настроек показывают лисп-программы [[elisp:customize-saved][M-x
customize-saved]] и [[elisp:customize-unsaved][M-x customize-unsaved]]. Конечно, система кастомизации
не всемогуща и для некоторых настроек (сочетания клавиш) придется
написать несколько строк кода на лиспе. В общем виде весь последующий
код выглядит так:

#+name: load-packages-and-apply-advanced-customizations
#+begin_src elisp -r -n :tangle no
<<functions>>
<<customizations>>
<<keybindings>>
#+end_src

Начнем кастомизацию эмакса сверху и продолжим последовательно
углубляться во всё более тонкие аспекты его работы.

[[elisp:(describe-variable 'frame-title-format)][Frame Title Format]] ← имя буфера или полное имя файла/директории
предваренное именем пользователя и машины при удаленном
подключении. Как ни странно, заголовок фрейма (окна в оконном
менеджере операционной системы) не кастомизируется стандартными
средствами. Если открыто несколько фреймов, заголовок по-умолчанию
совершенно бесполезен, поэтому используем наипростейший формат,
позволяющий отличить один фрейм от другого.

#+name: customizations
#+begin_src elisp -r -n :tangle no
  (setq-default frame-title-format
   '(:eval (concat (when (file-remote-p default-directory)
                     (let ((user (file-remote-p default-directory 'user))
                           (host (file-remote-p default-directory 'host)))
                       (format "%s@%s:" user host)))
                   (or buffer-file-truename dired-directory (buffer-name)))))
#+end_src

# TODO · after buffer name when unsaved changes

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'frames)][Frames]]⊲[[elisp:(customize-variable-other-window 'menu-bar-mode)][Menu Bar Mode]] ← nil. 80% опций главном в меню
эмакса никогда не используются, остальные 20% продублированы в меню
моделайна; меню буферов вызывается по C-Left-Click в любом месте
буфера, меню буфера --- по C-Right-Click, само главное меню ---
клавишей F10. Разумнее всего отключить главное меню и включать его при
необходимости сочетанием C-M-F10.

#+name: keybindings
#+begin_src elisp -r -n :tangle no
(global-set-key (kbd "<C-M-f10>") 'toggle-menu-bar-mode-from-frame)
#+end_src

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'frames)][Frames]]⊲[[elisp:(customize-variable-other-window 'tool-bar-mode)][Tool Bar Mode]]  ← nil. Тулбар в эмаксе
абсолютно бесполезен.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'frames)][Frames]]⊲[[elisp:(customize-variable-other-window 'scroll-bar-mode)][Scroll Bar Mode]] ← right. Многие отключают
полосу прокрутки по трем причинам: она не является частью стандартного
интерфейса эмакса, она плохо реализована и эстетически убога. Но в то
же время, нельзя отрицать ее очевидную пользу в графических средах
даже в таком неполноценном виде.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'frames)][Frames]]⊲[[elisp:(customize-group-other-window 'window-divider)][Window Divider]]⊲[[elisp:(customize-variable-other-window 'window-divider-mode)][Window Divider Mode]] ←
nil. Визуальное разделение окон полосой позволяет менять размеры окон
мышкой. Полезная опция при включенных полосах прокрутки. Выглядит
старомодно, но в группе есть настройки стиля.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'frames)][Frames]]⊲[[elisp:(customize-face-other-window 'fringe)][Fringe face]] ← (t nil). Во всех текстовых
редакторах (начиная с блокнота) принято иметь небольшие поля по краям
области редактирования текста. Поля обязательно должны быть цвета фона
чтобы не акцентировать внимание на артефактах рендеринга полосы
прокрутки. [[elisp:(customize-themes)][Цветовые темы]] эмакса меняют цвета фона и полей, поэтому
каждый раз при изменении темы нам нужно чтобы цвет полей
соответствовал цвету фона. Для этого используем средство
[[https://en.wikipedia.org/wiki/Aspect-oriented_programming][аспектно-ориентированного]] программирования Advice, которое позволит
модифицировать поведение функций сторонних лисп-программ без изменения
их оригинальной реализации.

#+name: customizations
#+begin_src elisp -r -n :tangle no
(defadvice load-theme (after transparent-fringe (&optional ARG))
  (set-face-background 'fringe (face-attribute 'default :background)))
(ad-activate 'load-theme)
#+end_src

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'frames)][Frames]]⊲[[elisp:(customize-variable-other-window 'indicate-empty-lines)][Indicate Empty Lines]] ← nil. Штриховка на
полях изящно выделяет пустую область за гранью буфера, но иногда
отвлекает.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'initialization)][Initialization]]⊲[[elisp:(customize-variable-other-window 'initial-buffer-choice)][Initial Buffer Choice]] ←
remember-notes. Вместо напыщенного стартового экрана эмакс открывает
заметки, буфер =*​scratch​*=, файл, директорию или все что угодно, на
выбор.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'data)][Data]]⊲[[elisp:(customize-group-other-window 'remember)][Remember]]⊲[[elisp:(customize-variable-other-window 'remember-notes-initial-major-mode)][Remember Notes Initial Major Mode]] ←
initial-major-mode. Режим редактирования заметок. По-умолчанию
предполагается, что это заметки с лисп-кодом для эмакса, но можно 
[[elisp:(describe-function
 'customize-save-variable)][заменить на варианты]] вроде [[elisp:(customize-save-variable%20'remember-notes-initial-major-mode%20'text-mode)][text-mode]], [[elisp:(customize-save-variable%20'remember-notes-initial-major-mode%20'fundamental-mode)][fundamental-mode]], [[elisp:(customize-save-variable%20'remember-notes-initial-major-mode%20'org-mode)][org-mode]], или
что-угодно еще. В группе кастомизации [[elisp:(customize-group 'remember 'other-window)][Remember]] можно указать 
[[elisp:(customize-variable-other-window 'remember-data-file)][расположение файла с заметками]], например ~/Dropbox/Заметки, и много
других вещей.

[[elisp:(customize-group-other-window 'emacs)][Emacs]]⊲[[elisp:(customize-group-other-window 'environment)][Environment]]⊲[[elisp:(customize-group-other-window 'initialization)][Initialization]]⊲[[elisp:(customize-variable-other-window%20'initial-scratch-message)][Initial Scratch Message]] ←
bla-bla-bla. Эмакс [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html][всегда]] открывает =*scratch*=-буфер после запуска.
От него невозможно избавиться, но можно сделать [[http://ergoemacs.org/emacs/modernization_scratch_buffer.html][более полезным]], если
добавить в него несколько [[elisp:(describe-function 'fancy-splash-insert)][напыщенных]] ссылок на домашнюю директорию,
зашифрованный эмаксом файл с личными паролями, активные проекты, сайты
и прочее.

#+name: customizations
#+begin_src elisp -r -n :tangle no
  (add-hook 'emacs-startup-hook
            '(lambda ()
               (with-current-buffer "*scratch*"
                 (save-excursion
                   (let ((initial-scratch-message-end-point (1- (point-max))))
                     (goto-char initial-scratch-message-end-point)
                     (fancy-splash-insert
                      "To start: "
                      :link `("open file"
                              ,(lambda (_button) (call-interactively 'find-file))
                              "Specify a new file's name, to edit the file")
                      ", "
                      :link `("open home directory"
                              ,(lambda (_button) (dired "~"))
                              "Open your home directory, to operate on its files")
                      " or "
                      :link `("open password vault"
                              ,(lambda (_button) (ignore-errors (find-file "~/Dropbox/Passwords.org.gpg")))
                              "Open your encrypted file with passwords.")
                      ".")
                     (comment-region initial-scratch-message-end-point (point)))
                   (when (buffer-modified-p)
                     (set-buffer-modified-p nil))))))
#+end_src

установка рабочей директории

--------------------------------------------------------------------------------

отключение звоночка

(customize-face-other-window 'default) ← руками не трогать.

Кастомизация шрифтов в эмаксе чрезвычайно специфична и
системно-зависима. Это одно из немногих исключений из правил, когда
проще написать свой велосипед, чем использовать стандартные средства.

[[https://en.wikipedia.org/wiki/Cambria_(typeface)][Cambria]]-11 очень хороша в Windows 10. Как писал создатель языка C++:
«В коде программ [на C++] в этой книге [«Язык программирования C++»]
используется пропорциональный шрифт [полужирный италик с
засечками]. На первый взгляд такое написание кажется неестественным
для программистов, привыкших видеть шрифт с буквами одинаковой
ширины. Однако пропорциональный шрифт легче и лучше воспринимается,
чем моноширинный. Использование пропорционального шрифта также
позволяет избежать многих неестественных разрывов строк в коде. Более
того, мои эксперименты показали. что большинство людей через некоторое
время считают новый стиль более читабельным».

[[https://en.wikipedia.org/wiki/Consolas][Consolas]]-10 --- моноширинный шрифт по-умолчанию в Windows 10.

[[https://en.wikipedia.org/wiki/Courier_(typeface)#Courier_New][Courier New]]-9 --- классика жанра.

[[https://en.wikipedia.org/wiki/Monaco_(typeface)][Monaco]]-?? ---моноширинный шрифт по-умолчанию в ранних версиях Mac OS X.

[[https://en.wikipedia.org/wiki/Menlo_(typeface)][Menlo]]-?? --- моноширинный шрифт по-умолчанию в современных версиях Mac OS X.

[[http://www.marksimonson.com/fonts/view/anonymous-pro][Anonymous Pro]]-11, [[https://damieng.com/blog/2008/05/26/envy-code-r-preview-7-coding-font-released][Envy Code R]]-10 и другие --- модные моноширинные
шрифты для программирования.

Indent Tabs Mode

--------------------------------------------------------------------------------

[[elisp:(customize-group-other-window Режим"emacs" 'other-windows)][Emacs]]⊲[[elisp:(customize-group "i18n" 'other-window)][I18n]]⊲[[elisp:(customize-group "mule" 'other-window)][MULE Internationalization]]⊲[[elisp:(customize-variable-other-window 'default-input-method)][Default Input Method]] ←
russian-computer. Эмакс использует независимое от операционной системы
переключение языков и методов ввода для обеспечения своей работы в
очень разных средах. Переключение на русский язык по C-\ без
предварительного указания метода ввода требует кастомизации.

----------------------------------------------------------------------

Сочетания клавиш в эмаксе имеют три ярко выраженных особенности: их
/очень/ много; их трудно запомнить; и они вызывают повреждения рук при
злоупотреблении. Для снижения нагрузки на левую руку при вводе команд
эмакса многие люди [[http://www.emacswiki.org/emacs/MovingTheCtrlKey][советуют поменять местами клавиши Caps Lock и
Control]]. Раньше я так и делал, но опыт показал, что этого
недостаточно. На современных стандартных клавиатурах кнопку Caps Lock
нажимать удобнее, чем Control, но это не избавляет от нагрузки на
левую руку, а всего лишь незначительно снижает ее. До сих пор, лучшее
решение к которому я пришел --- полностью отказаться от клавиш Control
и Caps Lock и использовать в качестве модификатора «C-» зажатую
клавишу «пробел». Решение не идеальное, но для здоровья рук оно
полезнее, чем caps ⇆ ctrl.

Сочетание клавиш C-w --- де-факто стандарт для удаления слова слева от
курсора.

#+name: functions
#+begin_src elisp -r -n :tangle no
  (defun backward-kill-word-or-kill-region (arg)
    (interactive "p")
    (if (region-active-p)
        (kill-region (region-beginning) 
                     (region-end))
      (backward-kill-word arg)))
#+end_src

#+name: keybindings
#+begin_src elisp -r -n :tangle no
  (global-set-key (kbd "C-w") 'backward-kill-word-or-kill-region)
  (define-key minibuffer-local-map (kbd "C-w") 'backward-kill-word-or-kill-region)
  (add-hook 'ido-setup-hook 
            (lambda ()
              (define-key ido-completion-map (kbd "C-w") 'ido-delete-backward-word-updir)))
#+end_src

----------------------------------------------------------------------

Следует быть осторожным при указании относительных путей: [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Windows-HOME.html][в Windows
Vista/7/8/10]] эмакс считает своей домашней директорией ~ значение
переменной окружения (getenv "AppData")→C:\Users\User\AppData\Roaming,
в то время как в UNIX-совместимых ОС подразумевается директория
(getenv "UserProfile")→C:\Users\User. Чтобы избежать неоднозначности
нужно установить значение переменной окружения HOME в Windows.

#+begin_src emacs-lisp -r -n :tangle no
  (when (eq system-type 'windows-nt)
    (setenv "Home" (getenv "UserProfile")))
 #+end_src

----------------------------------------------------------------------

Исправления некоторых багов GNU Emacs:

- [[http://wenshanren.org/?p=781][Emacs 25 testing: org-html-export returns org-html-fontify-code: Wrong number of arguments…]]

  #+name: fix-some-bugs
  #+begin_src emacs-lisp -r -n :tangle no
    (defun org-font-lock-ensure ()
      (font-lock-fontify-buffer))
  #+end_src

----------------------------------------------------------------------

Copyright © 2010-2015 Роман Захаров [[mailto:zahardzhan@gmail.com][zahardzhan@gmail.com]].

[[https://gitlab.com/zahardzhan/well-tuned-emacs][Проект на Gitlab]] начат 1 ноября 2015.

Эта программа не является частью GNU Emacs.

Это программа является свободным программным обеспечением. Вы можете
распространять и/или модифицировать её согласно условиям
[[http://www.gnu.org/licenses/gpl-3.0.txt][Стандартной Общественной Лицензии GNU]],
опубликованной Фондом Свободного Программного Обеспечения, версии 3
или, по Вашему желанию, любой более поздней версии.

Эта программа распространяется в надежде, что она будет полезной, но
БЕЗ ВСЯКИХ ГАРАНТИЙ, в том числе подразумеваемых гарантий ТОВАРНОГО
СОСТОЯНИЯ ПРИ ПРОДАЖЕ и ГОДНОСТИ ДЛЯ ОПРЕДЕЛЁННОГО
ПРИМЕНЕНИЯ. Смотрите Стандартную Общественную Лицензию GNU для
получения дополнительной информации.

Вы должны были получить копию Стандартной Общественной Лицензии GNU
вместе с программой. В случае её отсутствия, посмотрите
[[http://www.gnu.org/licenses/][Лицензии на сайте GNU]].
